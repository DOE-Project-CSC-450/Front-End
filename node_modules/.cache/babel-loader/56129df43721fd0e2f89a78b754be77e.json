{"ast":null,"code":"var _jsxFileName = \"/Users/Banana/Desktop/GITHUB/Front-End/src/components/Search.jsx\";\nimport React from 'react';\nimport { Component } from 'react';\nimport { Button, Segment, Divider, Search, Grid, Header, Dropdown } from 'semantic-ui-react';\nconst type1_options = [{\n  key: 'option A',\n  text: 'optionA',\n  value: '1'\n}, {\n  key: 'option B',\n  text: 'option B',\n  value: '2'\n}, {\n  key: 'option C',\n  text: 'option C',\n  value: '3'\n}, {\n  key: 'option D',\n  text: 'option D',\n  value: '4'\n}];\n/* const initialState = { isLoading: false, results: [], value: '' }\n\nconst source = _.times(5, () => ({\n  title: 'princess',\n  description: 'thing1',\n  image: 'thing2',\n  price: 123,\n}))\n\n */\n\nexport default class Searching extends Component {\n  /*  state = initialState\n   handleResultSelect = (e, { result }) => this.setState({ value: result.title })\n   handleSearchChange = (e, { value }) => {\n     this.setState({ isLoading: true, value })\n      setTimeout(() => {\n       if (this.state.value.length < 1) return this.setState(initialState)\n        const re = new RegExp(_.escapeRegExp(this.state.value), 'i')\n       const isMatch = (result) => re.test(result.title)\n        this.setState({\n         isLoading: false,\n         results: _.filter(source, isMatch),\n       })\n     }, 300)\n   } */\n  render() {\n    /* const { isLoading, value, results } = this.state */\n    return React.createElement(Grid.Column, {\n      width: 15,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Illuminant\"), React.createElement(Search, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Frequent Instruments\"), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"LED Bulb\"), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Cool Light name\"), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Another light\"), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Search via lighting type\"), React.createElement(Dropdown, {\n      placeholder: \"TYPE 1\",\n      selection: true,\n      options: type1_options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/Users/Banana/Desktop/GITHUB/Front-End/src/components/Search.jsx"],"names":["React","Component","Button","Segment","Divider","Search","Grid","Header","Dropdown","type1_options","key","text","value","Searching","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,OAA1B,EAAmCC,MAAnC,EAA2CC,IAA3C,EAAiDC,MAAjD,EAAyDC,QAAzD,QAAyE,mBAAzE;AAGA,MAAMC,aAAa,GAAG,CAClB;AAAEC,EAAAA,GAAG,EAAE,UAAP;AAAmBC,EAAAA,IAAI,EAAE,SAAzB;AAAoCC,EAAAA,KAAK,EAAE;AAA3C,CADkB,EAEhB;AAAEF,EAAAA,GAAG,EAAE,UAAP;AAAmBC,EAAAA,IAAI,EAAE,UAAzB;AAAqCC,EAAAA,KAAK,EAAE;AAA5C,CAFgB,EAGhB;AAAEF,EAAAA,GAAG,EAAE,UAAP;AAAmBC,EAAAA,IAAI,EAAE,UAAzB;AAAqCC,EAAAA,KAAK,EAAE;AAA5C,CAHgB,EAIhB;AAAEF,EAAAA,GAAG,EAAE,UAAP;AAAmBC,EAAAA,IAAI,EAAE,UAAzB;AAAqCC,EAAAA,KAAK,EAAE;AAA5C,CAJgB,CAAtB;AAMA;;;;;;;;;;;AAWA,eAAe,MAAMC,SAAN,SAAwBZ,SAAxB,CAAkC;AAEhD;;;;;;;;;;;;;;AAkBCa,EAAAA,MAAM,GAAG;AAEP;AACA,WAGI,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,KAAK,EAAE,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,OAAD;AAAS,MAAA,KAAK,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAKF,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALE,EAMF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BANE,EAOF,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPE,EAQF,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBARE,EASF,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBATE,EAWF,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ,EAEI,oBAAC,QAAD;AACA,MAAA,WAAW,EAAC,QADZ;AAEA,MAAA,SAAS,MAFT;AAGA,MAAA,OAAO,EAAEL,aAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAXE,CAFF,CAHJ;AA8BD;;AArD8C","sourcesContent":["import React from 'react';\nimport { Component } from 'react'\nimport { Button, Segment, Divider, Search, Grid, Header, Dropdown } from 'semantic-ui-react';\n\n\nconst type1_options = [\n    { key: 'option A', text: 'optionA', value: '1' },\n      { key: 'option B', text: 'option B', value: '2' },\n      { key: 'option C', text: 'option C', value: '3' },\n      { key: 'option D', text: 'option D', value: '4' },\n    ]\n/* const initialState = { isLoading: false, results: [], value: '' }\n\nconst source = _.times(5, () => ({\n  title: 'princess',\n  description: 'thing1',\n  image: 'thing2',\n  price: 123,\n}))\n\n */\n\nexport default class Searching extends Component {\n\n /*  state = initialState\n  handleResultSelect = (e, { result }) => this.setState({ value: result.title })\n  handleSearchChange = (e, { value }) => {\n    this.setState({ isLoading: true, value })\n\n    setTimeout(() => {\n      if (this.state.value.length < 1) return this.setState(initialState)\n\n      const re = new RegExp(_.escapeRegExp(this.state.value), 'i')\n      const isMatch = (result) => re.test(result.title)\n\n      this.setState({\n        isLoading: false,\n        results: _.filter(source, isMatch),\n      })\n    }, 300)\n  } */\n\n  render() {\n    \n    /* const { isLoading, value, results } = this.state */\n    return (\n\n        \n        <Grid.Column width={15}>\n\n          <Segment fluid>\n            <Header>Illuminant</Header>\n            <Search\n           \n          />\n        <Divider></Divider>\n        <div>Frequent Instruments</div>\n        <Button>LED Bulb</Button>\n        <Button>Cool Light name</Button>\n        <Button>Another light</Button>\n\n        <Divider>\n            <Header>Search via lighting type</Header>\n            <Dropdown\n            placeholder=\"TYPE 1\"\n            selection\n            options={type1_options}\n            />\n\n        </Divider>\n            \n          </Segment>\n        </Grid.Column>\n      \n    )\n  }\n}\n  \n\n "]},"metadata":{},"sourceType":"module"}