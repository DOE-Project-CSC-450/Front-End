{"version":3,"sources":["logo.svg","components/Search.jsx","components/uploadpage.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","type1_options","key","text","value","Searching","Grid","Column","width","Segment","fluid","Header","Search","Divider","Button","Dropdown","placeholder","selection","options","Component","Form","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,iOCKrCC,EAAgB,CAClB,CAAEC,IAAK,WAAYC,KAAM,UAAWC,MAAO,KACzC,CAAEF,IAAK,WAAYC,KAAM,WAAYC,MAAO,KAC5C,CAAEF,IAAK,WAAYC,KAAM,WAAYC,MAAO,KAC5C,CAAEF,IAAK,WAAYC,KAAM,WAAYC,MAAO,MAa7BC,E,iLAuBjB,OAGI,kBAACC,EAAA,EAAKC,OAAN,CAAaC,MAAO,IAElB,kBAACC,EAAA,EAAD,CAASC,OAAK,GACZ,kBAACC,EAAA,EAAD,mBACA,kBAACC,EAAA,EAAD,MAGJ,kBAACC,EAAA,EAAD,MACA,qDACA,kBAACC,EAAA,EAAD,iBACA,kBAACA,EAAA,EAAD,wBACA,kBAACA,EAAA,EAAD,sBAEA,kBAACD,EAAA,EAAD,KACI,kBAACF,EAAA,EAAD,iCACA,kBAACI,EAAA,EAAD,CACAC,YAAY,SACZC,WAAS,EACTC,QAASjB,W,GA5CkBkB,aChBlBC,E,iLAIjB,OACI,kBAACd,EAAA,EAAKC,OAAN,CAAaC,MAAO,IAClB,kBAACC,EAAA,EAAD,CAASC,OAAK,GACV,2CACA,iFACA,kBAACU,EAAD,oCAEI,6CACA,+CACA,4CACA,iDACA,kDACA,sDACA,2CACA,yCACA,4CACA,oDACA,sDACA,8CACA,iEAMV,kBAACP,EAAA,EAAD,Y,GA7B0BM,aCkBnBE,MAff,WACE,OAEE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,SCHYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8d819710.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport { Component } from 'react'\nimport { Button, Segment, Divider, Search, Grid, Header, Dropdown } from 'semantic-ui-react';\n\n\nconst type1_options = [\n    { key: 'option A', text: 'optionA', value: '1' },\n      { key: 'option B', text: 'option B', value: '2' },\n      { key: 'option C', text: 'option C', value: '3' },\n      { key: 'option D', text: 'option D', value: '4' },\n    ]\n/* const initialState = { isLoading: false, results: [], value: '' }\n\nconst source = _.times(5, () => ({\n  title: 'princess',\n  description: 'thing1',\n  image: 'thing2',\n  price: 123,\n}))\n\n */\n\nexport default class Searching extends Component {\n\n /*  state = initialState\n  handleResultSelect = (e, { result }) => this.setState({ value: result.title })\n  handleSearchChange = (e, { value }) => {\n    this.setState({ isLoading: true, value })\n\n    setTimeout(() => {\n      if (this.state.value.length < 1) return this.setState(initialState)\n\n      const re = new RegExp(_.escapeRegExp(this.state.value), 'i')\n      const isMatch = (result) => re.test(result.title)\n\n      this.setState({\n        isLoading: false,\n        results: _.filter(source, isMatch),\n      })\n    }, 300)\n  } */\n\n  render() {\n    \n    /* const { isLoading, value, results } = this.state */\n    return (\n\n        \n        <Grid.Column width={15}>\n\n          <Segment fluid>\n            <Header>Illuminant</Header>\n            <Search\n           \n          />\n        <Divider></Divider>\n        <div>Frequent Instruments</div>\n        <Button>LED Bulb</Button>\n        <Button>Cool Light name</Button>\n        <Button>Another light</Button>\n\n        <Divider>\n            <Header>Search via lighting type</Header>\n            <Dropdown\n            placeholder=\"TYPE 1\"\n            selection\n            options={type1_options}\n            />\n\n        </Divider>\n            \n          </Segment>\n        </Grid.Column>\n      \n    )\n  }\n}\n  \n\n ","import React from 'react';\nimport { Component } from 'react'\nimport { Button, Segment, Divider, Search, Grid, Header, Dropdown } from 'semantic-ui-react';\n\n\n\nexport default class Form extends Component {\n\n \n  render() {\n    return (\n        <Grid.Column width={15}>\n          <Segment fluid>\n              <h1>Upload Form</h1>\n              <h2>Fill in the form below. * questions are required!</h2>\n              <Form>\n                  var currentDate = getDate();\n                  <h3>Manufacturer:</h3>\n                  <h3>Catalog Number:</h3>\n                  <h3>Description:</h3>\n                  <h3>Document Creator:</h3>\n                  <h3>Unique identifier:</h3>\n                  <h3>Measurement equipment:</h3>\n                  <h3>Laboratory:</h3>\n                  <h3>Report #:</h3>\n                  <h3>Report data:</h3>\n                  <h3>Reflection geometry:</h3>\n                  <h3>Transmission geometry:</h3>\n                  <h4>bandwidth fwhm</h4>\n                  <h4>Bandwidth corrected (yes or no):</h4>\n\n\n\n\n              </Form>\n        <Divider>\n\n        </Divider>\n            \n          </Segment>\n        </Grid.Column>\n      \n    )\n  }\n}\n  \n\n ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button } from 'semantic-ui-react'\nimport Searching from './components/Search'\nimport Form from './components/uploadpage'\n//need to import everything into app and then put all the elements inside of app\n\n\nfunction App() {\n  return (\n   \n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Searching />\n        <Form />\n        \n        \n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}