{"version":3,"sources":["components/Instrument_Profile.jsx","components/BarChart.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["export_dropdown_options","Component","text","image","src","InstProf","Segment","Header","size","Grid","Row","columns","Column","Dropdown","placeholder","options","Image","centered","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gXAUMA,GCAiBC,YDAS,CAC5B,CAAEC,KAAM,OAAQC,MAAO,CAACC,IAAI,MAC5B,CAAEF,KAAM,OAAQC,MAAO,CAAEC,IAAI,MAC7B,CAAEF,KAAM,OAAQC,MAAO,CAAEC,IAAI,QAIZC,E,iLAEb,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAb,YACA,kBAACD,EAAA,EAAD,CAAQC,KAAK,UAAb,wBACA,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,IAAN,CAAUC,QAAS,GAEf,kBAACF,EAAA,EAAKG,OAAN,KACI,kBAACL,EAAA,EAAD,CAAQC,KAAK,UAAb,qBACA,0DACA,yFAGJ,kBAACC,EAAA,EAAKG,OAAN,KACI,kBAACC,EAAA,EAAD,CACIC,YAAa,YACbC,QAASf,IAGb,kBAACO,EAAA,EAAD,CAAQC,KAAK,UAAb,wBACA,4DACA,4DACA,yDACA,sDAKR,kBAACC,EAAA,EAAKC,IAAN,CAAUC,QAAS,GACf,kBAACF,EAAA,EAAKG,OAAN,KACI,kBAACL,EAAA,EAAD,CAAQC,KAAK,UAAb,kBACA,kBAACQ,EAAA,EAAD,CAAOZ,IAAI,2DAA2DI,KAAK,SAASS,UAAQ,KAGhG,kBAACR,EAAA,EAAKG,OAAN,KACI,kBAACL,EAAA,EAAD,CAAQC,KAAK,UAAb,wBACA,kBAACQ,EAAA,EAAD,CAAOZ,IAAI,2DAA2DI,KAAK,SAASS,UAAQ,KAGhG,kBAACR,EAAA,EAAKG,OAAN,KACI,kBAACL,EAAA,EAAD,CAAQC,KAAK,UAAb,WACA,kBAACQ,EAAA,EAAD,CAAOZ,IAAI,2DAA2DI,KAAK,SAASS,UAAQ,MAIpG,kBAACR,EAAA,EAAKC,IAAN,CAAUC,QAAS,GACf,kBAACF,EAAA,EAAKG,OAAN,KACI,kBAACL,EAAA,EAAD,CAAQC,KAAK,UAAb,gBACA,yEACA,oCAGJ,kBAACC,EAAA,EAAKG,OAAN,KACI,kBAACL,EAAA,EAAD,CAAQC,KAAK,UAAb,wBACA,gEACA,kE,GAzDUP,aEDvBiB,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.45f380b9.chunk.js","sourcesContent":["import React from 'react';\nimport { Component } from 'react'\nimport { Header, Segment, Image, Grid, Dropdown } from 'semantic-ui-react'; \n\n//import './App.css'\nimport BarChart from './BarChart'\n\n\n//import SpectaGraph from './spectragraph.html'\n\nconst export_dropdown_options = [\n    { text: '.eis', image: {src:'/'} },\n    { text: '.txt', image: { src:'/'} },\n    { text: '.xls', image: { src:'/'} },\n] //end dropdown options\n\n\nexport default class InstProf extends Component {\n    render () {\n        return (\n            <Segment>\n                <Header size='huge'>LED Bulb</Header>\n                <Header size='medium'>Catalog #: 902398378</Header>  \n                <Grid>\n                    <Grid.Row columns={2}>\n\n                        <Grid.Column>\n                            <Header size='medium'>Basic Information</Header>\n                            <p> Manufacturer: Lighting Co.</p>\n                            <p> Description: This is a great lightbulb to use everyday. </p>\n                        </Grid.Column>\n\n                        <Grid.Column>\n                            <Dropdown\n                                placeholder= \"Export As\"\n                                options={export_dropdown_options}\n                            />\n\n                            <Header size='medium'>Creation Information</Header>\n                            <p> Document Creator: John Smith</p>\n                            <p> Labratory: Lighting Lab LLC </p>\n                            <p> Creation Date: Sept 2006 </p>\n                            <p> Report Number: 0283 </p>\n\n                        </Grid.Column>\n                    </Grid.Row>\n\n                    <Grid.Row columns={3}>\n                        <Grid.Column>\n                            <Header size='medium'>Spectral Graph</Header>\n                            <Image src='https://react.semantic-ui.com/images/wireframe/image.png' size='medium' centered/>\n                        </Grid.Column>\n\n                        <Grid.Column>\n                            <Header size='medium'>Human Spectral Graph</Header>\n                            <Image src='https://react.semantic-ui.com/images/wireframe/image.png' size='medium' centered/>\n                        </Grid.Column>\n\n                        <Grid.Column>\n                            <Header size='medium'>Graph 3</Header>\n                            <Image src='https://react.semantic-ui.com/images/wireframe/image.png' size='medium' centered/>\n                        </Grid.Column>\n                    </Grid.Row>\n\n                    <Grid.Row columns={2}>\n                        <Grid.Column>\n                            <Header size='medium'>Calculations</Header>\n                            <p> Insert Calculuations here. Calculations. </p>\n                            < barChart />\n                        </Grid.Column>\n\n                        <Grid.Column>\n                            <Header size='medium'>Spectral Information</Header>\n                            <p> Spectral Quantity: transmittance</p>\n                            <p> Reflection Geometry: di:8 </p>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n           </Segment>\n\n        ) // end return \n    } // end render\n} //end InstProf class","//TEST CODE PROVIDED BY https://medium.com/@Elijah_Meeks/interactive-applications-with-react-d3-f76f7b3ebc71\n\n//HERE TO TEST D3 AND REACT INTERACTION\n\n\nimport React, { Component } from 'react'\n//import './App.css'\nimport { scaleLinear } from 'd3-scale' \nimport { max } from 'd3-array'\nimport { select } from 'd3-selection'\nclass BarChart extends Component {\n   constructor(props){\n      super(props)\n      this.createBarChart = this.createBarChart.bind(this)\n   }\n   componentDidMount() {\n      this.createBarChart()\n   }\n   componentDidUpdate() {\n      this.createBarChart()\n   }\n   createBarChart() {\n      const node = this.node\n      const dataMax = max(this.props.data)\n      const yScale = scaleLinear()\n         .domain([0, dataMax])\n         .range([0, this.props.size[1]])\n   select(node)\n      .selectAll('rect')\n      .data(this.props.data)\n      .enter()\n      .append('rect')\n   \n   select(node)\n      .selectAll('rect')\n      .data(this.props.data)\n      .exit()\n      .remove()\n   \n   select(node)\n      .selectAll('rect')\n      .data(this.props.data)\n      .style('fill', '#fe9922')\n      .attr('x', (d,i) => i * 25)\n      .attr('y', d => this.props.size[1] - yScale(d))\n      .attr('height', d => yScale(d))\n      .attr('width', 25)\n   }\nrender() {\n      return <svg ref={node => this.node = node}\n      width={500} height={500}>\n      </svg>\n   }\n}\nexport default BarChart","import React from 'react';\nimport './App.css';\n\nimport InstProf from './components/Instrument_Profile'; \n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <InstProf /> \n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}