//Spectragraph2_old

/* NOTES REGARDING THIS FILE:
connection from: https://github.com/leighsteinerlocus/d3-react-tutorial
documentation on React Hooks + useEffect(): https://reactjs.org/docs/hooks-effect.html

code from: https://medium.com/technical-credit/declarative-d3-examples-in-react-6e736e526182

run a npm install d3-scale?
https://www.npmjs.com/package/d3-scale
*/

// ------------------------------------------------------

import React, { useEffect } from 'react';
import * as d3 from 'd3';
//if you get an error from the line above, try: npm install --save d3

import { scaleBand, scaleLinear } from 'd3-scale';
import { tsvParse } from 'd3-dsv';
import { max } from 'd3-array';
import { axisBottom, axisLeft } from 'd3-axis';
import { select } from 'd3-selection';



//import dataTsv from './data.tsv';
const dataTsv = [0.000172174,0.00019782,0.000172848,0.000163227,0.00019036,0.000207698,0.000207333,0.000205626,0.000219011,0.000243203,0.000250086,0.000244639,0.000252732,0.000262975,0.000276727,0.000290483,0.00028693,0.000297219,0.000312412,0.000315359,0.000337491,0.000344327,0.000337119,0.000363282,0.000389649,0.000407566,0.00041797,0.000434073,0.000442378,0.000444949,0.000456075,0.000482237,0.000503746,0.000508244,0.00051079,0.000523827,0.00054248,0.000554715,0.000583674,0.000604276,0.000610428,0.000646404,0.000674084,0.000699585,0.000741093,0.000767675,0.000785589,0.00080585,0.000841434,0.000885663,0.000933614,0.000981088,0.00102862,0.00107423,0.00111577,0.00114923,0.00119956,0.00126482,0.00133148,0.00138322,0.00144021,0.00151,0.00157309,0.00162601,0.00167451,0.00172948,0.00180016,0.00187155,0.00193338,0.00198944,0.00204157,0.00209568,0.00215704,0.00219709,0.00224178,0.00230715,0.00236484,0.00240902,0.00245309,0.00252348,0.00258008,0.00263304,0.00269515,0.00274847,0.00280766,0.00287297,0.00292793,0.00298318,0.00304171,0.00310261,0.00315364,0.00321186,0.00328218,0.00334429,0.00340726,0.00347082,0.00353171,0.00359507,0.00366292,0.00373399,0.00379765,0.00387051,0.00395153,0.00402396,0.00409127,0.00415639,0.00422352,0.00430151,0.00437621,0.00444173,0.00450698,0.0045849,0.00466572,0.00472928,0.00480616,0.0048882,0.00496589,0.00504995,0.00513396,0.00521344,0.00528571,0.0053713,0.00546538,0.00555368,0.00562803,0.00570766,0.00580115,0.00588494,0.00596953,0.00605666,0.0061415,0.00622863,0.00631495,0.00639675,0.00647968,0.00656847,0.00666355,0.00675598,0.00684861,0.00694155,0.00703297,0.00712488,0.00721611,0.00730705,0.00741329,0.00751468,0.00760288,0.00769554,0.00779143,0.00788892,0.00798469,0.00808532,0.0081877,0.00828745,0.00838375,0.00848458,0.00859149,0.00869148,0.00879345,0.00889897,0.00900473,0.00910574,0.00921401,0.00934005,0.00945291,0.00955333,0.00964845,0.0097525,0.00986606,0.00998117,0.0100808,0.010181,0.0102927,0.0104205,0.0105271,0.0106331,0.0107541,0.0108701,0.0109805,0.0110883,0.0112009,0.011319,0.0114368,0.0115469,0.0116648,0.0117839,0.0118974,0.012018,0.0121366,0.0122494,0.0123617,0.0124877,0.0126216,0.0127422,0.0128585,0.0129744,0.013093,0.0132226,0.0133515,0.0134729,0.0135978,0.0137267,0.0138545,0.013965,0.0140883,0.0142214,0.0143461,0.0144722,0.0146023,0.0147358,0.0148634,0.0149892,0.0151171,0.0152497,0.0153771,0.0155011,0.0156348,0.0157648,0.0158922,0.0160224,0.0161573,0.0162919,0.0164228,0.0165606,0.0166936,0.0168182,0.0169478,0.0170776,0.0172082,0.0173449,0.0174795,0.0176161,0.0177598,0.0178883,0.0180154,0.0181518,0.0182835,0.0184198,0.0185615,0.0186944,0.0188304,0.0189688,0.0191012,0.0192313,0.0193592,0.0194838,0.0196069,0.0197348,0.0198704,0.0200031,0.0201449,0.0202959,0.0204403,0.0205872,0.0207391,0.0208957,0.0210491,0.0211969,0.0213392,0.0214825,0.0216285,0.0217744,0.0218991,0.0220511,0.0222333,0.0223782,0.0225147,0.0226398,0.0227358,0.022829,0.0229347,0.0230591,0.0231736,0.0232847,0.023401,0.0235226,0.0236386,0.0237495,0.023872,0.0239917,0.024116,0.0242632,0.0244058,0.0245426,0.0246787,0.0248103,0.0249429,0.0250797,0.0252168,0.0253558,0.0254955,0.0256323,0.0257657,0.0259011,0.0260487,0.0261909,0.0263284,0.0264652,0.0265997,0.0267299,0.0268576,0.0270052,0.0271427,0.027262,0.0273868,0.0275199,0.0276553,0.02778,0.0279065,0.0280341,0.028161,0.0282878,0.0284224,0.0285628,0.0286752,0.0287894,0.0289171,0.029041,0.0291739,0.0293081,0.0294245,0.0295452,0.0296672,0.0297842,0.0299098,0.0300351,0.0301553,0.0302839,0.0304045,0.0305173,0.0306503,0.0307787,0.0309035,0.0310371,0.0311663,0.0313018,0.0314547,0.0315945,0.0317195,0.0318353,0.0319626,0.0320831,0.0321946,0.0323149,0.0324493,0.0325868,0.0327058,0.032813,0.032921,0.0330405,0.0331728,0.033301,0.0334166,0.0335321,0.0336525,0.0337725,0.0338742,0.0339848,0.0341061,0.0342289,0.0343481,0.0344628,0.0345751,0.0346835,0.0347939,0.0349112,0.0350421,0.0351654,0.0352762,0.0353832,0.0354953,0.0356085,0.035713,0.0358186,0.0359324,0.0360561,0.0361776,0.0362911,0.0363953,0.0364909,0.0366012,0.0367221,0.0368322,0.0369424,0.0370543,0.0371636,0.037262,0.0373667,0.0374864,0.0376034,0.0377135,0.0378147,0.0379086,0.0380138,0.0381248,0.0382288,0.0383434,0.0384591,0.0385651,0.0386649,0.0387688,0.0388774,0.0389741,0.0390755,0.0391806,0.0392785,0.039374,0.0394733,0.039581,0.0396789,0.039777,0.0398812,0.0399886,0.0400859,0.0401746,0.0402686,0.0403624,0.040457,0.0405552,0.040652,0.0407425,0.0408276,0.0409219,0.0410236,0.041125,0.041211,0.0412943,0.0413842,0.0414855,0.0415709,0.041658,0.0417583,0.0418476,0.041933,0.0420186,0.0421027,0.0421868,0.0422697,0.0423498,0.0424432,0.0425377,0.0426241,0.0427086,0.0427884,0.0428643,0.0429402,0.0430219,0.0431028,0.0431761,0.0432639,0.0433535]; 
const data = dataTsv; 
const d = data; 

const svgWidth = 960,
  svgHeight = 500;

//Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr("width")
const margin = { top: 20, right: 20, bottom: 30, left: 40 },
  width = svgWidth - margin.left - margin.right,
  height = svgHeight - margin.top - margin.bottom;

const x = scaleBand()
    .rangeRound([0, width])
    .padding(0.1),
  y = scaleLinear().rangeRound([height, 0]);

/*const data = tsvParse(dataTsv, d => {
  d.frequency = +d.frequency;
  return d;
}); */ 

x.domain(data.map(d => d.letter));
y.domain([0, max(data, d => d.frequency)]);


//connects Instrument_Profile and Spectragraph2 files: 
const Graphs = (props) => {
    useEffect(() => { //uses React Hook, see above links
     d3.select('.graphs > *').remove();
     //draw(props)
   }, )
    return <div className="graphs" />
  }
// ------------------------------------------------------


function drawGraph() {
    d3.select("body").append("span").text("Let's draw the graph!");

}

export default () => (
  <svg width={svgWidth} height={svgHeight}>
    <g transform={`translate(${margin.left}, ${margin.top})`}>
      <g
        className="axis axis--x"
        transform={`translate(0, ${height})`}
        ref={node => select(node).call(axisBottom(x))}
      />
      <g className="axis axis--y">
        <g ref={node => select(node).call(axisLeft(y).ticks(10, '%'))} />
        {/* Note: In the actual example 'Frequency' is a child of the above 'g' and it doesn't render. 
          * Changing it to a sibiling allows it to render and having the axis as an empty 'g' means that it will also play nicer with react:
          * "The easiest way to avoid conflicts is to prevent the React component from updating. You can do this by rendering elements that React has no reason to update, like an empty <div />."
          * https://reactjs.org/docs/integrating-with-other-libraries.html 
          */}
        <text transform="rotate(-90)" y="6" dy="0.71em" textAnchor="end">
          Frequency
        </text>
      </g>
      {data.map(d => (
        <rect
          key={d.letter}
          className="bar"
          x={x(d.letter)}
          y={y(d.frequency)}
          width={x.bandwidth()}
          height={height - y(d.frequency)}
        />
      ))}
    </g>
  </svg>

) //end export default 



//what will display to the DOM: 
/*const draw = (props) => {
    d3.select("body").append("span").text("Hello, world!");
  
    drawGraph();

} //end const draw*/ 

//export default Graphs