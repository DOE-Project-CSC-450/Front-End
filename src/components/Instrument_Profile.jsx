import React from 'react';
import { Component } from 'react'
import { Header, Button, Menu, Segment, Table, Image, Grid, Dropdown, Divider } from 'semantic-ui-react';
import Graph from './graph';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import _ from 'lodash'
import { timingSafeEqual } from 'crypto';
import { thisTypeAnnotation, thisExpression } from '@babel/types';
import Chart from "react-google-charts";
import Lamp from './Lamp'
import Searching from './Search'

var CCT = 0;
var raresult = 0;
var rereresult = 0;
var numbersArray = [];
var numberOption;
var zz;
var dataInfo;
var finalArray = [];
var h;
var b;
var finalArray2 = [];
var lastData;
var hold2 = [];
var spOption;
var ui;
var t;
//single letters are used as variables in for loops

const export_dropdown_options = [
    { value: 'pdf', text: 'pdf' },
    { value: 'eis', text: '.eis' },
    { value: 'txt', text: '.txt' },
    { value: 'xls', text: '.xls' }
] //end dropdown options

//------------------------------------------------------------------------------------------------------------------------------------------------------------
//var enterSPD =  [0,0,0,0,0,0,0.0000015096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000019117,0.000065244,0,0,0,0,0,0.000018352,0.00000053906,0.0000024213,0.000095229,0.00004318,0.000024558,0.000064537,0.000043974,0,0.000027943,0.0002329,0.00022234,0.00021973,0.00028315,0.00023166,0.00020966,0.00043675,0.00058831,0.00063488,0.00070955,0.00081486,0.00088896,0.0010312,0.0012456,0.001274,0.001377,0.0014938,0.0017239,0.0020156,0.0023178,0.0025425,0.0028903,0.00314,0.0034063,0.0037498,0.0041058,0.0045461,0.0051099,0.0055608,0.0060647,0.0068037,0.0075095,0.00833,0.0091122,0.010042,0.011083,0.012177,0.013514,0.01484,0.016017,0.017366,0.018733,0.020005,0.021103,0.021955,0.022676,0.023223,0.023306,0.022942,0.022567,0.021937,0.020973,0.02011,0.019029,0.017942,0.017027,0.016036,0.015091,0.014185,0.013502,0.012982,0.012346,0.011868,0.01145,0.010789,0.01026,0.0097845,0.0092346,0.0088,0.0083486,0.0078232,0.0074766,0.0071036,0.0067314,0.0064197,0.0061713,0.0059188,0.0057115,0.005553,0.0053749,0.0052752,0.0051864,0.0050744,0.0049499,0.0049107,0.004869,0.0048146,0.0047632,0.0047419,0.0047814,0.004787,0.0047961,0.004871,0.0049035,0.0049847,0.0050168,0.0050657,0.0051086,0.0051641,0.0053674,0.0054884,0.0055812,0.0057032,0.0058063,0.005909,0.0060093,0.0061572,0.0062514,0.0063656,0.0064669,0.0065051,0.0066474,0.006784,0.0068973,0.0069624,0.006994,0.0071396,0.0072192,0.0072234,0.0072836,0.0074217,0.007526,0.0074618,0.007518,0.0075579,0.0075989,0.007614,0.007699,0.0078426,0.0079181,0.0079758,0.0080426,0.0080261,0.0080537,0.0081371,0.0081487,0.0081475,0.0082862,0.0083096,0.0083101,0.0082538,0.008262,0.0083082,0.0082889,0.0083339,0.0083645,0.0083093,0.0082269,0.0082772,0.0083701,0.0082911,0.0082522,0.0081868,0.0081143,0.008174,0.0081903,0.0082412,0.0081418,0.0080919,0.0080858,0.0079932,0.0079536,0.0079082,0.0079294,0.0078974,0.0078623,0.0077957,0.0077553,0.0077978,0.0077081,0.0076086,0.007666,0.0075797,0.0074257,0.0073866,0.0073662,0.0072574,0.0072547,0.0072515,0.0071481,0.0070954,0.007005,0.0069204,0.0068883,0.0068093,0.0067821,0.0067035,0.0066155,0.0065395,0.0065417,0.0065829,0.0063181,0.0061201,0.0060811,0.006013,0.0059244,0.0059176,0.0058972,0.0057796,0.0056655,0.0055626,0.0055749,0.0055747,0.0054698,0.0053947,0.0053175,0.0052102,0.0050813,0.0051444,0.0050441,0.0049107,0.0048971,0.0047858,0.0046401,0.0046122,0.0045945,0.0045437,0.0045325,0.0043132,0.0041811,0.0041685,0.0040053,0.0040541,0.0040672,0.003948,0.003858,0.0037962,0.0036341,0.0036911,0.0036264,0.0035333,0.0035954,0.0034746,0.0034268,0.0032575,0.0032472,0.0031958,0.0029668,0.0029534,0.0029679,0.0029461,0.0027283,0.0027339,0.0027047,0.0026736,0.0026012,0.002568,0.0025276,0.0025071,0.0024186,0.0022856,0.0022515,0.0022108,0.0020957,0.002142,0.0020223,0.0019468,0.0019646,0.00186,0.0017898,0.0016984,0.0018029,0.0017964,0.001598,0.0015535,0.0014908,0.0016014,0.001662,0.0014968,0.0015353,0.001413,0.0013867,0.001367,0.0012454,0.0013206,0.001236,0.0010728,0.0010832,0.0010863,0.00090647,0.00090358,0.00081978,0.00093285,0.0010903,0.0010803,0.00085966,0.0006569,0.00074962,0.00075382,0.00083852,0.00059667,0.00064796,0.00084201,0.00080616,0.0006791,0.00065248,0.00061019,0.0006327,0.00063059,0.00072249,0.0007211,0.00044959,0.00023649,0.00040013,0.0006692,0.00044921,0.00047015,0.00045497,0.00055161,0.00055065,0.00050951,0.00047482,0.00045263,0.00044884,0.00047939,0.00033114,0.00034302,0.00020767,0.00038185,0.00031213,0.00012598,0.00023577,0.00031852,0.00017718,0.00014881,0.000075044,0.00011845,0.00003516,0.0000028057,0.000099924,0.00020553,0.00020694,0.00025627,0.00016396,0.00024973,0.0001083,0.00012334,0.000132,0.00016329,0.00012404,0.00019365,0.0000048463,0,0,0,0.00001251,0.00018304,0,0,0,0.000011653,0,0,0.000091518,0.0003246,0.00000019015,0,0.000020734,0.000098699,0,0,0,0.000060899];
//var defaultSPD = [0,0,0,0,0,0,0,0,0,0,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.49,0.49,0.49,0.49,0.49,0.49,0.49,0.49,0.49,0.49,0.49,0.49,0.49,0.49,0.49,0.49,0.49,0.49,0.49,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.14,0.14,0.14,0.14,0.14,0.14,0.14,0.14,0.14,0.14,0.14,0.14,0.14,0.14,0.14,0.14,0.14,0.14,0.14,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.43,0.43,0.43,0.43,0.43,0.43,0.43,0.43,0.43,0.43,0.43,0.43,0.43,0.43,0.43,0.43,0.43,0.43,0.43,0.43,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
//var defaultSPD = enterSPD.slice(30, enterSPD.length-171);

//var defaultSPD =  [0.0044,0.0046,0.005,0.0028,0.0037,0.0026,0.0053,0.0031,0.0043,0.0047,0.0053,0.0057,0.0071,0.0085,0.0098,0.0122,0.0145,0.0185,0.0228,0.0287,0.0365,0.0454,0.0573,0.0716,0.0872,0.1054,0.1259,0.151,0.1799,0.2131,0.2543,0.301,0.352,0.408,0.4559,0.4967,0.5141,0.5002,0.4638,0.4184,0.3829,0.3534,0.3398,0.3259,0.3152,0.3034,0.2923,0.2835,0.2796,0.2854,0.2923,0.3046,0.3187,0.3378,0.353,0.3708,0.3907,0.4095,0.429,0.4472,0.4609,0.4785,0.4917,0.5039,0.5144,0.5256,0.529,0.5384,0.5452,0.5534,0.5604,0.5648,0.5702,0.5807,0.5869,0.5949,0.6018,0.6118,0.6213,0.6311,0.6372,0.645,0.6539,0.6608,0.6688,0.6742,0.6802,0.6833,0.6878,0.6906,0.691,0.6938,0.6941,0.698,0.6964,0.6977,0.6971,0.6981,0.6966,0.6986,0.7003,0.7035,0.7063,0.7114,0.7166,0.725,0.7328,0.7432,0.7524,0.7646,0.7771,0.7921,0.8081,0.8241,0.8382,0.8532,0.8707,0.8894,0.9051,0.9198,0.9311,0.9474,0.9605,0.9707,0.9778,0.9842,0.9924,0.9939,0.9947,0.9982,0.9984,0.9928,0.9856,0.9737,0.9634,0.952,0.9362,0.9201,0.9028,0.8871,0.8689,0.8482,0.8272,0.8024,0.7814,0.7584,0.7336,0.7113,0.6839,0.6616,0.6379,0.6141,0.5902,0.5664,0.5415,0.5194,0.494,0.4737,0.4518,0.4318,0.4106,0.3916,0.3708,0.3519,0.3361,0.3195,0.3019,0.2841,0.2695,0.2547,0.2424,0.2276,0.2152,0.2036,0.1914,0.18,0.1701,0.1597,0.1508,0.1423,0.133,0.1259,0.1177,0.1116,0.1043,0.0987,0.0925,0.0866,0.0817,0.0767,0.0715,0.0665,0.0635,0.0598,0.0554,0.052,0.0493,0.0456,0.0429,0.0414,0.0415];
//------var defaultSPD;
//=[0.000172174,0.00019782,0.000172848,0.000163227,0.00019036,0.000207698,0.000207333,0.000205626,0.000219011,0.000243203,0.000250086,0.000244639,0.000252732,0.000262975,0.000276727,0.000290483,0.00028693,0.000297219,0.000312412,0.000315359,0.000337491,0.000344327,0.000337119,0.000363282,0.000389649,0.000407566,0.00041797,0.000434073,0.000442378,0.000444949,0.000456075,0.000482237,0.000503746,0.000508244,0.00051079,0.000523827,0.00054248,0.000554715,0.000583674,0.000604276,0.000610428,0.000646404,0.000674084,0.000699585,0.000741093,0.000767675,0.000785589,0.00080585,0.000841434,0.000885663,0.000933614,0.000981088,0.00102862,0.00107423,0.00111577,0.00114923,0.00119956,0.00126482,0.00133148,0.00138322,0.00144021,0.00151,0.00157309,0.00162601,0.00167451,0.00172948,0.00180016,0.00187155,0.00193338,0.00198944,0.00204157,0.00209568,0.00215704,0.00219709,0.00224178,0.00230715,0.00236484,0.00240902,0.00245309,0.00252348,0.00258008,0.00263304,0.00269515,0.00274847,0.00280766,0.00287297,0.00292793,0.00298318,0.00304171,0.00310261,0.00315364,0.00321186,0.00328218,0.00334429,0.00340726,0.00347082,0.00353171,0.00359507,0.00366292,0.00373399,0.00379765,0.00387051,0.00395153,0.00402396,0.00409127,0.00415639,0.00422352,0.00430151,0.00437621,0.00444173,0.00450698,0.0045849,0.00466572,0.00472928,0.00480616,0.0048882,0.00496589,0.00504995,0.00513396,0.00521344,0.00528571,0.0053713,0.00546538,0.00555368,0.00562803,0.00570766,0.00580115,0.00588494,0.00596953,0.00605666,0.0061415,0.00622863,0.00631495,0.00639675,0.00647968,0.00656847,0.00666355,0.00675598,0.00684861,0.00694155,0.00703297,0.00712488,0.00721611,0.00730705,0.00741329,0.00751468,0.00760288,0.00769554,0.00779143,0.00788892,0.00798469,0.00808532,0.0081877,0.00828745,0.00838375,0.00848458,0.00859149,0.00869148,0.00879345,0.00889897,0.00900473,0.00910574,0.00921401,0.00934005,0.00945291,0.00955333,0.00964845,0.0097525,0.00986606,0.00998117,0.0100808,0.010181,0.0102927,0.0104205,0.0105271,0.0106331,0.0107541,0.0108701,0.0109805,0.0110883,0.0112009,0.011319,0.0114368,0.0115469,0.0116648,0.0117839,0.0118974,0.012018,0.0121366,0.0122494,0.0123617,0.0124877,0.0126216,0.0127422,0.0128585,0.0129744,0.013093,0.0132226,0.0133515,0.0134729,0.0135978,0.0137267,0.0138545,0.013965,0.0140883,0.0142214,0.0143461,0.0144722,0.0146023,0.0147358,0.0148634,0.0149892,0.0151171,0.0152497,0.0153771,0.0155011,0.0156348,0.0157648,0.0158922,0.0160224,0.0161573,0.0162919,0.0164228,0.0165606,0.0166936,0.0168182,0.0169478,0.0170776,0.0172082,0.0173449,0.0174795,0.0176161,0.0177598,0.0178883,0.0180154,0.0181518,0.0182835,0.0184198,0.0185615,0.0186944,0.0188304,0.0189688,0.0191012,0.0192313,0.0193592,0.0194838,0.0196069,0.0197348,0.0198704,0.0200031,0.0201449,0.0202959,0.0204403,0.0205872,0.0207391,0.0208957,0.0210491,0.0211969,0.0213392,0.0214825,0.0216285,0.0217744,0.0218991,0.0220511,0.0222333,0.0223782,0.0225147,0.0226398,0.0227358,0.022829,0.0229347,0.0230591,0.0231736,0.0232847,0.023401,0.0235226,0.0236386,0.0237495,0.023872,0.0239917,0.024116,0.0242632,0.0244058,0.0245426,0.0246787,0.0248103,0.0249429,0.0250797,0.0252168,0.0253558,0.0254955,0.0256323,0.0257657,0.0259011,0.0260487,0.0261909,0.0263284,0.0264652,0.0265997,0.0267299,0.0268576,0.0270052,0.0271427,0.027262,0.0273868,0.0275199,0.0276553,0.02778,0.0279065,0.0280341,0.028161,0.0282878,0.0284224,0.0285628,0.0286752,0.0287894,0.0289171,0.029041,0.0291739,0.0293081,0.0294245,0.0295452,0.0296672,0.0297842,0.0299098,0.0300351,0.0301553,0.0302839,0.0304045,0.0305173,0.0306503,0.0307787,0.0309035,0.0310371,0.0311663,0.0313018,0.0314547,0.0315945,0.0317195,0.0318353,0.0319626,0.0320831,0.0321946,0.0323149,0.0324493,0.0325868,0.0327058,0.032813,0.032921,0.0330405,0.0331728,0.033301,0.0334166,0.0335321,0.0336525,0.0337725,0.0338742,0.0339848,0.0341061,0.0342289,0.0343481,0.0344628,0.0345751,0.0346835,0.0347939,0.0349112,0.0350421,0.0351654,0.0352762,0.0353832,0.0354953,0.0356085,0.035713,0.0358186,0.0359324,0.0360561,0.0361776,0.0362911,0.0363953,0.0364909,0.0366012,0.0367221,0.0368322,0.0369424,0.0370543,0.0371636,0.037262,0.0373667,0.0374864,0.0376034,0.0377135,0.0378147,0.0379086,0.0380138,0.0381248,0.0382288,0.0383434,0.0384591,0.0385651,0.0386649,0.0387688,0.0388774,0.0389741,0.0390755,0.0391806,0.0392785,0.039374,0.0394733,0.039581,0.0396789,0.039777,0.0398812,0.0399886,0.0400859,0.0401746,0.0402686,0.0403624,0.040457,0.0405552,0.040652,0.0407425,0.0408276,0.0409219,0.0410236,0.041125,0.041211,0.0412943,0.0413842,0.0414855,0.0415709,0.041658,0.0417583,0.0418476,0.041933,0.0420186,0.0421027,0.0421868,0.0422697,0.0423498,0.0424432,0.0425377,0.0426241,0.0427086,0.0427884,0.0428643,0.0429402,0.0430219,0.0431028,0.0431761,0.0432639,0.0433535]
//console.log(shSPD.length);
//console.log(defaultSPD.length);
//console.log(rawSPD.length);

//SPD to Ra and Re conversion and CCT methods from:
//https://www.waveformlighting.com/tech/color-rendering-index-calculator

/* function getSPD(SPD) {

    return xnormalize(defaultSPD);
}
 */


//-------------------------------------------------------------------------------------------------------------------------------------------------------------


export default class InstProf extends Component {

    constructor(props) {
        super(props);
        this.state = { pdf: false }
        this.state = { eis: '' }
        this.state = { txt: '' }
        this.state = { xls: '' }
        this.state = { S: [] }
        this.state = { specs: [] }
        this.state = { doingCalculations: false }
        this.state = { save: [] }
        this.state = { serverSide: 'temp' }
        this.state = { fastArray2: [] }

    }
    componentDidMount() {
        this.getProductsSpectral();
    }

    getProductsSpectral = _ => {
        fetch('http://localhost:4000/SpectralData')
            .then(response => response.json())
            .then(_ = (response) => {
                this.setState({ S: response.data })
                this.setState({ serverSide: Object.values(response.data) })
                console.log("WE FOR SURE NEED TO KNOW", this.state.S)
                for (t = 0; t < this.state.serverSide.length; t++) {
                    spOption =
                    {
                        "id": this.state.serverSide[t].SpectraSearchID,
                        "spectralInfo": this.state.serverSide[t].SpectralData,
                    }
                    if (hold2.length < this.state.serverSide.length) {
                        hold2.push(spOption);
                    }
                }
                this.setState({ fastArray2: hold2 });
                console.log("marry's spoption", hold2);
                //depending on which one they click, you get the id which is this.props.s00
                //if the id  is equal to the id in [].id then you dispaly that [].spectraldata
                for (ui = 0; ui < this.state.fastArray2.length; ui++) {
                    if (this.props.s00 === this.state.fastArray2[ui].id) {
                        console.log("we wanna display the information from", this.state.fastArray2[ui].id)
                        console.log("which is in place", ui)
                        this.setState({ specs: (this.state.serverSide[ui].SpectralData).split(',') })
                        console.log("see it", this.state.specs);
                    }
                    else { console.log("NOOPE") }
                }
                finalArray = []
                for (h = 0; h < this.state.specs.length; h++) {
                    b = this.state.specs[h]
                    finalArray.push(b);
                }

                lastData = finalArray.map(Number)
                this.setState({ save: lastData })
                console.log("EVERYTHING", lastData)
            })
            .catch(err => console.error(err))
    }




    calculations = (defaultSPD) => {
        console.log("this is the defail spd", defaultSPD);
        if (defaultSPD === undefined) {
            console.log("no worries")
            document.getElementsByClassName("erroring")[0].innerHTML = "Insufficient spectral data for this instrument."
            return;
        }



        var spectr = getSPD(-1);


        var CRI = calcCRI(spectr);
        // console.log(CRI);
        var Ra = 0;
        var Re = 0;


        for (var q = 0; q < 15; q++) {
            console.log("CRI" + CRI[q]);
            if (q < 8) {
                Ra = Ra + CRI[q];
            }
            Re = Re + CRI[q];
        }
        Ra = Ra / 8;
        Re = Re / 15;

        raresult = Math.round(Ra);
        rereresult = Math.round(Re);

        function normalize(spec) {
            var max = Math.max.apply(null, spec);
            if (max > 0) {
                for (var k = 0; k < spec.length; k++) {
                    spec[k] = spec[k] / max;
                }
            }
            return spec;
        }
        function getSPD(SPD) {
            //console.log(normalize(defaultSPD));

            console.log("for real fuk me", defaultSPD)
            return normalize(defaultSPD);
        }

        function calcCRI(test) {
            var TCS = [[0.2190, 0.2270, 0.2350, 0.2416, 0.2468, 0.2520, 0.2536, 0.2552, 0.2560, 0.2560, 0.2560, 0.2552, 0.2544, 0.2536, 0.2528, 0.2520, 0.2504, 0.2488, 0.2472, 0.2456, 0.2440, 0.2424, 0.2408, 0.2394, 0.2382, 0.2370, 0.2350, 0.2330, 0.2316, 0.2308, 0.2300, 0.2284, 0.2268, 0.2258, 0.2254, 0.2250, 0.2238, 0.2226, 0.2216, 0.2208, 0.2200, 0.2192, 0.2184, 0.2176, 0.2168, 0.2160, 0.2152, 0.2144, 0.2140, 0.2140, 0.2140, 0.2140, 0.2140, 0.2144, 0.2152, 0.2160, 0.2168, 0.2176, 0.2190, 0.2210, 0.2230, 0.2238, 0.2246, 0.2252, 0.2256, 0.2260, 0.2260, 0.2260, 0.2258, 0.2254, 0.2250, 0.2250, 0.2250, 0.2254, 0.2262, 0.2270, 0.2282, 0.2294, 0.2312, 0.2336, 0.2360, 0.2396, 0.2432, 0.2466, 0.2498, 0.2530, 0.2566, 0.2602, 0.2640, 0.2680, 0.2720, 0.2764, 0.2808, 0.2860, 0.2920, 0.2980, 0.3060, 0.3140, 0.3226, 0.3318, 0.3410, 0.3514, 0.3618, 0.3716, 0.3808, 0.3900, 0.3976, 0.4052, 0.4120, 0.4180, 0.4240, 0.4284, 0.4328, 0.4364, 0.4392, 0.4420, 0.4444, 0.4468, 0.4484, 0.4492, 0.4500, 0.4504, 0.4508, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4510, 0.4508, 0.4504, 0.4500, 0.4500, 0.4500, 0.4502, 0.4506, 0.4510, 0.4510, 0.4510, 0.4514, 0.4522, 0.4530, 0.4534, 0.4538, 0.4542, 0.4546, 0.4550, 0.4558, 0.4566, 0.4572, 0.4576, 0.4580, 0.4588, 0.4596, 0.4604, 0.4612, 0.4620, 0.4624, 0.4628, 0.4632, 0.4636, 0.4640, 0.4644, 0.4648, 0.4652, 0.4656, 0.4660, 0.4660, 0.4660, 0.4660, 0.4660, 0.4660, 0.4660, 0.4660, 0.4662, 0.4666, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670, 0.4670],
            [0.0700, 0.0736, 0.0772, 0.0810, 0.0850, 0.0890, 0.0938, 0.0986, 0.1030, 0.1070, 0.1110, 0.1130, 0.1150, 0.1164, 0.1172, 0.1180, 0.1188, 0.1196, 0.1202, 0.1206, 0.1210, 0.1214, 0.1218, 0.1220, 0.1220, 0.1220, 0.1220, 0.1220, 0.1222, 0.1226, 0.1230, 0.1234, 0.1238, 0.1246, 0.1258, 0.1270, 0.1274, 0.1278, 0.1286, 0.1298, 0.1310, 0.1322, 0.1334, 0.1348, 0.1364, 0.1380, 0.1400, 0.1420, 0.1444, 0.1472, 0.1500, 0.1536, 0.1572, 0.1620, 0.1680, 0.1740, 0.1804, 0.1868, 0.1934, 0.2002, 0.2070, 0.2142, 0.2214, 0.2284, 0.2352, 0.2420, 0.2464, 0.2508, 0.2544, 0.2572, 0.2600, 0.2616, 0.2632, 0.2646, 0.2658, 0.2670, 0.2678, 0.2686, 0.2696, 0.2708, 0.2720, 0.2736, 0.2752, 0.2772, 0.2796, 0.2820, 0.2848, 0.2876, 0.2910, 0.2950, 0.2990, 0.3030, 0.3070, 0.3116, 0.3168, 0.3220, 0.3248, 0.3276, 0.3302, 0.3326, 0.3350, 0.3366, 0.3382, 0.3394, 0.3402, 0.3410, 0.3410, 0.3410, 0.3412, 0.3416, 0.3420, 0.3420, 0.3420, 0.3420, 0.3420, 0.3420, 0.3416, 0.3412, 0.3410, 0.3410, 0.3410, 0.3402, 0.3394, 0.3390, 0.3390, 0.3390, 0.3386, 0.3382, 0.3380, 0.3380, 0.3380, 0.3376, 0.3372, 0.3368, 0.3364, 0.3360, 0.3356, 0.3352, 0.3348, 0.3344, 0.3340, 0.3332, 0.3324, 0.3320, 0.3320, 0.3320, 0.3316, 0.3312, 0.3310, 0.3310, 0.3310, 0.3306, 0.3302, 0.3298, 0.3294, 0.3290, 0.3286, 0.3282, 0.3280, 0.3280, 0.3280, 0.3276, 0.3272, 0.3268, 0.3264, 0.3260, 0.3256, 0.3252, 0.3248, 0.3244, 0.3240, 0.3240, 0.3240, 0.3240, 0.3240, 0.3240, 0.3236, 0.3232, 0.3228, 0.3224, 0.3220, 0.3216, 0.3212, 0.3208, 0.3204, 0.3200, 0.3192, 0.3184, 0.3176, 0.3168, 0.3160, 0.3156, 0.3152, 0.3150, 0.3150, 0.3150, 0.3146, 0.3142, 0.3140, 0.3140, 0.3140],
            [0.0650, 0.0662, 0.0674, 0.0684, 0.0692, 0.0700, 0.0708, 0.0716, 0.0722, 0.0726, 0.0730, 0.0730, 0.0730, 0.0732, 0.0736, 0.0740, 0.0740, 0.0740, 0.0740, 0.0740, 0.0740, 0.0736, 0.0732, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0730, 0.0732, 0.0736, 0.0740, 0.0744, 0.0748, 0.0754, 0.0762, 0.0770, 0.0782, 0.0794, 0.0810, 0.0830, 0.0850, 0.0886, 0.0922, 0.0970, 0.1030, 0.1090, 0.1158, 0.1226, 0.1304, 0.1392, 0.1480, 0.1576, 0.1672, 0.1772, 0.1876, 0.1980, 0.2072, 0.2164, 0.2250, 0.2330, 0.2410, 0.2486, 0.2562, 0.2636, 0.2708, 0.2780, 0.2876, 0.2972, 0.3094, 0.3242, 0.3390, 0.3514, 0.3638, 0.3744, 0.3832, 0.3920, 0.3948, 0.3976, 0.3992, 0.3996, 0.4000, 0.3972, 0.3944, 0.3904, 0.3852, 0.3800, 0.3740, 0.3680, 0.3618, 0.3554, 0.3490, 0.3422, 0.3354, 0.3286, 0.3218, 0.3150, 0.3086, 0.3022, 0.2962, 0.2906, 0.2850, 0.2798, 0.2746, 0.2704, 0.2672, 0.2640, 0.2612, 0.2584, 0.2560, 0.2540, 0.2520, 0.2500, 0.2480, 0.2458, 0.2434, 0.2410, 0.2386, 0.2362, 0.2338, 0.2314, 0.2290, 0.2270, 0.2250, 0.2232, 0.2216, 0.2200, 0.2188, 0.2176, 0.2168, 0.2164, 0.2160, 0.2160, 0.2160, 0.2166, 0.2178, 0.2190, 0.2210, 0.2230, 0.2252, 0.2276, 0.2300, 0.2332, 0.2364, 0.2406, 0.2458, 0.2510, 0.2582, 0.2654, 0.2728, 0.2804, 0.2880, 0.2976, 0.3072, 0.3176, 0.3288, 0.3400, 0.3504, 0.3608, 0.3708, 0.3804, 0.3900, 0.3988, 0.4076, 0.4158, 0.4234, 0.4310, 0.4374, 0.4438, 0.4496, 0.4548, 0.4600, 0.4648, 0.4696, 0.4738, 0.4774, 0.4810, 0.4838, 0.4866, 0.4890, 0.4910, 0.4930, 0.4946, 0.4962, 0.4976, 0.4988, 0.5000, 0.5008, 0.5016, 0.5026, 0.5038, 0.5050, 0.5070, 0.5090, 0.5112, 0.5136, 0.5160],
            [0.0740, 0.0776, 0.0812, 0.0850, 0.0890, 0.0930, 0.0978, 0.1026, 0.1072, 0.1116, 0.1160, 0.1180, 0.1200, 0.1216, 0.1228, 0.1240, 0.1248, 0.1256, 0.1264, 0.1272, 0.1280, 0.1292, 0.1304, 0.1318, 0.1334, 0.1350, 0.1366, 0.1382, 0.1400, 0.1420, 0.1440, 0.1468, 0.1496, 0.1530, 0.1570, 0.1610, 0.1654, 0.1698, 0.1748, 0.1804, 0.1860, 0.1936, 0.2012, 0.2098, 0.2194, 0.2290, 0.2390, 0.2490, 0.2594, 0.2702, 0.2810, 0.2918, 0.3026, 0.3128, 0.3224, 0.3320, 0.3400, 0.3480, 0.3556, 0.3628, 0.3700, 0.3752, 0.3804, 0.3844, 0.3872, 0.3900, 0.3916, 0.3932, 0.3942, 0.3946, 0.3950, 0.3938, 0.3926, 0.3906, 0.3878, 0.3850, 0.3818, 0.3786, 0.3750, 0.3710, 0.3670, 0.3618, 0.3566, 0.3514, 0.3462, 0.3410, 0.3354, 0.3298, 0.3240, 0.3180, 0.3120, 0.3056, 0.2992, 0.2928, 0.2864, 0.2800, 0.2732, 0.2664, 0.2598, 0.2534, 0.2470, 0.2398, 0.2326, 0.2260, 0.2200, 0.2140, 0.2076, 0.2012, 0.1954, 0.1902, 0.1850, 0.1810, 0.1770, 0.1738, 0.1714, 0.1690, 0.1670, 0.1650, 0.1632, 0.1616, 0.1600, 0.1584, 0.1568, 0.1556, 0.1548, 0.1540, 0.1532, 0.1524, 0.1518, 0.1514, 0.1510, 0.1502, 0.1494, 0.1488, 0.1484, 0.1480, 0.1480, 0.1480, 0.1480, 0.1480, 0.1480, 0.1484, 0.1488, 0.1494, 0.1502, 0.1510, 0.1522, 0.1534, 0.1548, 0.1564, 0.1580, 0.1596, 0.1612, 0.1626, 0.1638, 0.1650, 0.1662, 0.1674, 0.1684, 0.1692, 0.1700, 0.1704, 0.1708, 0.1708, 0.1704, 0.1700, 0.1692, 0.1684, 0.1676, 0.1668, 0.1660, 0.1652, 0.1644, 0.1640, 0.1640, 0.1640, 0.1644, 0.1648, 0.1656, 0.1668, 0.1680, 0.1696, 0.1712, 0.1730, 0.1750, 0.1770, 0.1786, 0.1802, 0.1818, 0.1834, 0.1850, 0.1866, 0.1882, 0.1896, 0.1908, 0.1920, 0.1928, 0.1936, 0.1946, 0.1958, 0.1970],
            [0.2950, 0.2994, 0.3038, 0.3068, 0.3084, 0.3100, 0.3108, 0.3116, 0.3122, 0.3126, 0.3130, 0.3138, 0.3146, 0.3158, 0.3174, 0.3190, 0.3202, 0.3214, 0.3228, 0.3244, 0.3260, 0.3276, 0.3292, 0.3308, 0.3324, 0.3340, 0.3360, 0.3380, 0.3404, 0.3432, 0.3460, 0.3484, 0.3508, 0.3536, 0.3568, 0.3600, 0.3636, 0.3672, 0.3714, 0.3762, 0.3810, 0.3862, 0.3914, 0.3958, 0.3994, 0.4030, 0.4058, 0.4086, 0.4110, 0.4130, 0.4150, 0.4162, 0.4174, 0.4182, 0.4186, 0.4190, 0.4182, 0.4174, 0.4162, 0.4146, 0.4130, 0.4114, 0.4098, 0.4078, 0.4054, 0.4030, 0.4002, 0.3974, 0.3946, 0.3918, 0.3890, 0.3858, 0.3826, 0.3792, 0.3756, 0.3720, 0.3684, 0.3648, 0.3610, 0.3570, 0.3530, 0.3486, 0.3442, 0.3398, 0.3354, 0.3310, 0.3266, 0.3222, 0.3176, 0.3128, 0.3080, 0.3040, 0.3000, 0.2952, 0.2896, 0.2840, 0.2788, 0.2736, 0.2688, 0.2644, 0.2600, 0.2548, 0.2496, 0.2440, 0.2380, 0.2320, 0.2272, 0.2224, 0.2180, 0.2140, 0.2100, 0.2060, 0.2020, 0.1988, 0.1964, 0.1940, 0.1920, 0.1900, 0.1882, 0.1866, 0.1850, 0.1842, 0.1834, 0.1824, 0.1812, 0.1800, 0.1788, 0.1776, 0.1768, 0.1764, 0.1760, 0.1756, 0.1752, 0.1750, 0.1750, 0.1750, 0.1750, 0.1750, 0.1750, 0.1750, 0.1750, 0.1758, 0.1766, 0.1776, 0.1788, 0.1800, 0.1812, 0.1824, 0.1836, 0.1848, 0.1860, 0.1872, 0.1884, 0.1896, 0.1908, 0.1920, 0.1932, 0.1944, 0.1958, 0.1974, 0.1990, 0.1994, 0.1998, 0.1998, 0.1994, 0.1990, 0.1986, 0.1982, 0.1976, 0.1968, 0.1960, 0.1956, 0.1952, 0.1950, 0.1950, 0.1950, 0.1954, 0.1958, 0.1962, 0.1966, 0.1970, 0.1982, 0.1994, 0.2006, 0.2018, 0.2030, 0.2038, 0.2046, 0.2056, 0.2068, 0.2080, 0.2096, 0.2112, 0.2126, 0.2138, 0.2150, 0.2158, 0.2166, 0.2174, 0.2182, 0.2190],
            [0.1510, 0.1718, 0.1926, 0.2154, 0.2402, 0.2650, 0.2946, 0.3242, 0.3532, 0.3816, 0.4100, 0.4316, 0.4532, 0.4696, 0.4808, 0.4920, 0.4984, 0.5048, 0.5098, 0.5134, 0.5170, 0.5198, 0.5226, 0.5254, 0.5282, 0.5310, 0.5338, 0.5366, 0.5392, 0.5416, 0.5440, 0.5468, 0.5496, 0.5520, 0.5540, 0.5560, 0.5560, 0.5560, 0.5556, 0.5548, 0.5540, 0.5520, 0.5500, 0.5474, 0.5442, 0.5410, 0.5370, 0.5330, 0.5286, 0.5238, 0.5190, 0.5130, 0.5070, 0.5008, 0.4944, 0.4880, 0.4804, 0.4728, 0.4652, 0.4576, 0.4500, 0.4424, 0.4348, 0.4276, 0.4208, 0.4140, 0.4064, 0.3988, 0.3914, 0.3842, 0.3770, 0.3694, 0.3618, 0.3546, 0.3478, 0.3410, 0.3346, 0.3282, 0.3218, 0.3154, 0.3090, 0.3026, 0.2962, 0.2902, 0.2846, 0.2790, 0.2734, 0.2678, 0.2626, 0.2578, 0.2530, 0.2482, 0.2434, 0.2396, 0.2368, 0.2340, 0.2312, 0.2284, 0.2266, 0.2258, 0.2250, 0.2238, 0.2226, 0.2218, 0.2214, 0.2210, 0.2206, 0.2202, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2200, 0.2206, 0.2218, 0.2230, 0.2246, 0.2262, 0.2282, 0.2306, 0.2330, 0.2354, 0.2378, 0.2400, 0.2420, 0.2440, 0.2468, 0.2496, 0.2524, 0.2552, 0.2580, 0.2600, 0.2620, 0.2640, 0.2660, 0.2680, 0.2700, 0.2720, 0.2740, 0.2760, 0.2780, 0.2792, 0.2804, 0.2814, 0.2822, 0.2830, 0.2842, 0.2854, 0.2870, 0.2890, 0.2910, 0.2930, 0.2950, 0.2972, 0.2996, 0.3020, 0.3064, 0.3108, 0.3154, 0.3202, 0.3250, 0.3302, 0.3354, 0.3406, 0.3458, 0.3510, 0.3562, 0.3614, 0.3664, 0.3712, 0.3760, 0.3812, 0.3864, 0.3914, 0.3962, 0.4010, 0.4058, 0.4106, 0.4154, 0.4202, 0.4250, 0.4294, 0.4338, 0.4382, 0.4426, 0.4470, 0.4514, 0.4558, 0.4602, 0.4646, 0.4690, 0.4722, 0.4754, 0.4786, 0.4818, 0.4850],
            [0.3780, 0.4104, 0.4428, 0.4720, 0.4980, 0.5240, 0.5328, 0.5416, 0.5470, 0.5490, 0.5510, 0.5526, 0.5542, 0.5558, 0.5574, 0.5590, 0.5594, 0.5598, 0.5602, 0.5606, 0.5610, 0.5598, 0.5586, 0.5576, 0.5568, 0.5560, 0.5540, 0.5520, 0.5496, 0.5468, 0.5440, 0.5404, 0.5368, 0.5324, 0.5272, 0.5220, 0.5156, 0.5092, 0.5024, 0.4952, 0.4880, 0.4804, 0.4728, 0.4648, 0.4564, 0.4480, 0.4404, 0.4328, 0.4248, 0.4164, 0.4080, 0.3988, 0.3896, 0.3806, 0.3718, 0.3630, 0.3542, 0.3454, 0.3376, 0.3308, 0.3240, 0.3188, 0.3136, 0.3090, 0.3050, 0.3010, 0.2970, 0.2930, 0.2894, 0.2862, 0.2830, 0.2790, 0.2750, 0.2714, 0.2682, 0.2650, 0.2630, 0.2610, 0.2594, 0.2582, 0.2570, 0.2570, 0.2570, 0.2574, 0.2582, 0.2590, 0.2594, 0.2598, 0.2600, 0.2600, 0.2600, 0.2592, 0.2584, 0.2576, 0.2568, 0.2560, 0.2552, 0.2544, 0.2540, 0.2540, 0.2540, 0.2560, 0.2580, 0.2612, 0.2656, 0.2700, 0.2756, 0.2812, 0.2876, 0.2948, 0.3020, 0.3108, 0.3196, 0.3280, 0.3360, 0.3440, 0.3512, 0.3584, 0.3650, 0.3710, 0.3770, 0.3818, 0.3866, 0.3912, 0.3956, 0.4000, 0.4040, 0.4080, 0.4120, 0.4160, 0.4200, 0.4236, 0.4272, 0.4308, 0.4344, 0.4380, 0.4408, 0.4436, 0.4464, 0.4492, 0.4520, 0.4540, 0.4560, 0.4580, 0.4600, 0.4620, 0.4636, 0.4652, 0.4664, 0.4672, 0.4680, 0.4688, 0.4696, 0.4706, 0.4718, 0.4730, 0.4746, 0.4762, 0.4782, 0.4806, 0.4830, 0.4854, 0.4878, 0.4904, 0.4932, 0.4960, 0.4988, 0.5016, 0.5046, 0.5078, 0.5110, 0.5138, 0.5166, 0.5194, 0.5222, 0.5250, 0.5278, 0.5306, 0.5334, 0.5362, 0.5390, 0.5426, 0.5462, 0.5490, 0.5510, 0.5530, 0.5554, 0.5578, 0.5602, 0.5626, 0.5650, 0.5670, 0.5690, 0.5710, 0.5730, 0.5750, 0.5762, 0.5774, 0.5786, 0.5798, 0.5810],
            [0.1040, 0.1140, 0.1240, 0.1372, 0.1536, 0.1700, 0.1980, 0.2260, 0.2558, 0.2874, 0.3190, 0.3578, 0.3966, 0.4252, 0.4436, 0.4620, 0.4700, 0.4780, 0.4836, 0.4868, 0.4900, 0.4892, 0.4884, 0.4868, 0.4844, 0.4820, 0.4784, 0.4748, 0.4708, 0.4664, 0.4620, 0.4572, 0.4524, 0.4478, 0.4434, 0.4390, 0.4338, 0.4286, 0.4234, 0.4182, 0.4130, 0.4066, 0.4002, 0.3940, 0.3880, 0.3820, 0.3756, 0.3692, 0.3632, 0.3576, 0.3520, 0.3460, 0.3400, 0.3346, 0.3298, 0.3250, 0.3190, 0.3130, 0.3078, 0.3034, 0.2990, 0.2950, 0.2910, 0.2878, 0.2854, 0.2830, 0.2802, 0.2774, 0.2748, 0.2724, 0.2700, 0.2668, 0.2636, 0.2608, 0.2584, 0.2560, 0.2540, 0.2520, 0.2508, 0.2504, 0.2500, 0.2504, 0.2508, 0.2516, 0.2528, 0.2540, 0.2556, 0.2572, 0.2592, 0.2616, 0.2640, 0.2660, 0.2680, 0.2696, 0.2708, 0.2720, 0.2728, 0.2736, 0.2748, 0.2764, 0.2780, 0.2804, 0.2828, 0.2862, 0.2906, 0.2950, 0.3034, 0.3118, 0.3224, 0.3352, 0.3480, 0.3624, 0.3768, 0.3940, 0.4140, 0.4340, 0.4532, 0.4724, 0.4912, 0.5096, 0.5280, 0.5440, 0.5600, 0.5752, 0.5896, 0.6040, 0.6140, 0.6240, 0.6328, 0.6404, 0.6480, 0.6540, 0.6600, 0.6656, 0.6708, 0.6760, 0.6796, 0.6832, 0.6866, 0.6898, 0.6930, 0.6958, 0.6986, 0.7010, 0.7030, 0.7050, 0.7066, 0.7082, 0.7096, 0.7108, 0.7120, 0.7132, 0.7144, 0.7154, 0.7162, 0.7170, 0.7178, 0.7186, 0.7194, 0.7202, 0.7210, 0.7206, 0.7202, 0.7198, 0.7194, 0.7190, 0.7202, 0.7214, 0.7226, 0.7238, 0.7250, 0.7258, 0.7266, 0.7274, 0.7282, 0.7290, 0.7294, 0.7298, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300, 0.7300],
            [0.0660, 0.0644, 0.0628, 0.0612, 0.0596, 0.0580, 0.0568, 0.0556, 0.0544, 0.0532, 0.0520, 0.0520, 0.0520, 0.0518, 0.0514, 0.0510, 0.0506, 0.0502, 0.0500, 0.0500, 0.0500, 0.0496, 0.0492, 0.0488, 0.0484, 0.0480, 0.0476, 0.0472, 0.0468, 0.0464, 0.0460, 0.0452, 0.0444, 0.0436, 0.0428, 0.0420, 0.0416, 0.0412, 0.0404, 0.0392, 0.0380, 0.0368, 0.0356, 0.0346, 0.0338, 0.0330, 0.0322, 0.0314, 0.0308, 0.0304, 0.0300, 0.0296, 0.0292, 0.0288, 0.0284, 0.0280, 0.0280, 0.0280, 0.0280, 0.0280, 0.0280, 0.0284, 0.0288, 0.0292, 0.0296, 0.0300, 0.0300, 0.0300, 0.0302, 0.0306, 0.0310, 0.0310, 0.0310, 0.0312, 0.0316, 0.0320, 0.0320, 0.0320, 0.0322, 0.0326, 0.0330, 0.0334, 0.0338, 0.0342, 0.0346, 0.0350, 0.0358, 0.0366, 0.0378, 0.0394, 0.0410, 0.0422, 0.0434, 0.0448, 0.0464, 0.0480, 0.0496, 0.0512, 0.0536, 0.0568, 0.0600, 0.0664, 0.0728, 0.0812, 0.0916, 0.1020, 0.1156, 0.1292, 0.1468, 0.1684, 0.1900, 0.2164, 0.2428, 0.2720, 0.3040, 0.3360, 0.3688, 0.4016, 0.4354, 0.4702, 0.5050, 0.5354, 0.5658, 0.5930, 0.6170, 0.6410, 0.6574, 0.6738, 0.6890, 0.7030, 0.7170, 0.7262, 0.7354, 0.7436, 0.7508, 0.7580, 0.7628, 0.7676, 0.7722, 0.7766, 0.7810, 0.7846, 0.7882, 0.7914, 0.7942, 0.7970, 0.7994, 0.8018, 0.8042, 0.8066, 0.8090, 0.8110, 0.8130, 0.8150, 0.8170, 0.8190, 0.8210, 0.8230, 0.8248, 0.8264, 0.8280, 0.8288, 0.8296, 0.8302, 0.8306, 0.8310, 0.8318, 0.8326, 0.8334, 0.8342, 0.8350, 0.8354, 0.8358, 0.8360, 0.8360, 0.8360, 0.8364, 0.8368, 0.8372, 0.8376, 0.8380, 0.8384, 0.8388, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390, 0.8390],
            [0.0500, 0.0516, 0.0532, 0.0550, 0.0570, 0.0590, 0.0606, 0.0622, 0.0636, 0.0648, 0.0660, 0.0664, 0.0668, 0.0672, 0.0676, 0.0680, 0.0684, 0.0688, 0.0690, 0.0690, 0.0690, 0.0694, 0.0698, 0.0704, 0.0712, 0.0720, 0.0724, 0.0728, 0.0736, 0.0748, 0.0760, 0.0768, 0.0776, 0.0790, 0.0810, 0.0830, 0.0850, 0.0870, 0.0894, 0.0922, 0.0950, 0.0982, 0.1014, 0.1050, 0.1090, 0.1130, 0.1178, 0.1226, 0.1284, 0.1352, 0.1420, 0.1500, 0.1580, 0.1674, 0.1782, 0.1890, 0.2010, 0.2130, 0.2276, 0.2448, 0.2620, 0.2792, 0.2964, 0.3170, 0.3410, 0.3650, 0.3854, 0.4058, 0.4258, 0.4454, 0.4650, 0.4826, 0.5002, 0.5164, 0.5312, 0.5460, 0.5600, 0.5740, 0.5868, 0.5984, 0.6100, 0.6196, 0.6292, 0.6378, 0.6454, 0.6530, 0.6582, 0.6634, 0.6684, 0.6732, 0.6780, 0.6816, 0.6852, 0.6882, 0.6906, 0.6930, 0.6950, 0.6970, 0.6986, 0.6998, 0.7010, 0.7022, 0.7034, 0.7042, 0.7046, 0.7050, 0.7050, 0.7050, 0.7052, 0.7056, 0.7060, 0.7064, 0.7068, 0.7070, 0.7070, 0.7070, 0.7070, 0.7070, 0.7072, 0.7076, 0.7080, 0.7080, 0.7080, 0.7084, 0.7092, 0.7100, 0.7104, 0.7108, 0.7112, 0.7116, 0.7120, 0.7128, 0.7136, 0.7144, 0.7152, 0.7160, 0.7168, 0.7176, 0.7184, 0.7192, 0.7200, 0.7208, 0.7216, 0.7226, 0.7238, 0.7250, 0.7266, 0.7282, 0.7294, 0.7302, 0.7310, 0.7326, 0.7342, 0.7358, 0.7374, 0.7390, 0.7402, 0.7414, 0.7428, 0.7444, 0.7460, 0.7468, 0.7476, 0.7482, 0.7486, 0.7490, 0.7498, 0.7506, 0.7514, 0.7522, 0.7530, 0.7534, 0.7538, 0.7542, 0.7546, 0.7550, 0.7550, 0.7550, 0.7550, 0.7550, 0.7550, 0.7550, 0.7550, 0.7556, 0.7568, 0.7580, 0.7576, 0.7572, 0.7572, 0.7576, 0.7580, 0.7584, 0.7588, 0.7590, 0.7590, 0.7590, 0.7590, 0.7590, 0.7590, 0.7590, 0.7590],
            [0.1110, 0.1150, 0.1190, 0.1222, 0.1246, 0.1270, 0.1278, 0.1286, 0.1286, 0.1278, 0.1270, 0.1246, 0.1222, 0.1200, 0.1180, 0.1160, 0.1144, 0.1128, 0.1112, 0.1096, 0.1080, 0.1068, 0.1056, 0.1048, 0.1044, 0.1040, 0.1040, 0.1040, 0.1042, 0.1046, 0.1050, 0.1054, 0.1058, 0.1068, 0.1084, 0.1100, 0.1120, 0.1140, 0.1166, 0.1198, 0.1230, 0.1274, 0.1318, 0.1368, 0.1424, 0.1480, 0.1556, 0.1632, 0.1720, 0.1820, 0.1920, 0.2028, 0.2136, 0.2256, 0.2388, 0.2520, 0.2676, 0.2832, 0.2978, 0.3114, 0.3250, 0.3338, 0.3426, 0.3488, 0.3524, 0.3560, 0.3548, 0.3536, 0.3516, 0.3488, 0.3460, 0.3408, 0.3356, 0.3292, 0.3216, 0.3140, 0.3060, 0.2980, 0.2894, 0.2802, 0.2710, 0.2618, 0.2526, 0.2438, 0.2354, 0.2270, 0.2186, 0.2102, 0.2024, 0.1952, 0.1880, 0.1808, 0.1736, 0.1666, 0.1598, 0.1530, 0.1470, 0.1410, 0.1354, 0.1302, 0.1250, 0.1206, 0.1162, 0.1124, 0.1092, 0.1060, 0.1036, 0.1012, 0.0992, 0.0976, 0.0960, 0.0944, 0.0928, 0.0916, 0.0908, 0.0900, 0.0888, 0.0876, 0.0866, 0.0858, 0.0850, 0.0838, 0.0826, 0.0816, 0.0808, 0.0800, 0.0796, 0.0792, 0.0788, 0.0784, 0.0780, 0.0780, 0.0780, 0.0780, 0.0780, 0.0780, 0.0780, 0.0780, 0.0786, 0.0798, 0.0810, 0.0818, 0.0826, 0.0840, 0.0860, 0.0880, 0.0900, 0.0920, 0.0948, 0.0984, 0.1020, 0.1060, 0.1100, 0.1146, 0.1198, 0.1250, 0.1314, 0.1378, 0.1450, 0.1530, 0.1610, 0.1694, 0.1778, 0.1862, 0.1946, 0.2030, 0.2110, 0.2190, 0.2268, 0.2344, 0.2420, 0.2480, 0.2540, 0.2596, 0.2648, 0.2700, 0.2748, 0.2796, 0.2840, 0.2880, 0.2920, 0.2960, 0.3000, 0.3036, 0.3068, 0.3100, 0.3116, 0.3132, 0.3146, 0.3158, 0.3170, 0.3194, 0.3218, 0.3244, 0.3272, 0.3300, 0.3316, 0.3332, 0.3348, 0.3364, 0.3380],
            [0.1200, 0.1132, 0.1064, 0.1004, 0.0952, 0.0900, 0.0868, 0.0836, 0.0808, 0.0784, 0.0760, 0.0728, 0.0696, 0.0672, 0.0656, 0.0640, 0.0644, 0.0648, 0.0670, 0.0710, 0.0750, 0.0822, 0.0894, 0.0990, 0.1110, 0.1230, 0.1378, 0.1526, 0.1694, 0.1882, 0.2070, 0.2266, 0.2462, 0.2648, 0.2824, 0.3000, 0.3124, 0.3248, 0.3340, 0.3400, 0.3460, 0.3464, 0.3468, 0.3458, 0.3434, 0.3410, 0.3358, 0.3306, 0.3238, 0.3154, 0.3070, 0.2970, 0.2870, 0.2770, 0.2670, 0.2570, 0.2462, 0.2354, 0.2248, 0.2144, 0.2040, 0.1936, 0.1832, 0.1732, 0.1636, 0.1540, 0.1440, 0.1340, 0.1250, 0.1170, 0.1090, 0.1014, 0.0938, 0.0870, 0.0810, 0.0750, 0.0698, 0.0646, 0.0598, 0.0554, 0.0510, 0.0470, 0.0430, 0.0398, 0.0374, 0.0350, 0.0326, 0.0302, 0.0282, 0.0266, 0.0250, 0.0238, 0.0226, 0.0214, 0.0202, 0.0190, 0.0182, 0.0174, 0.0170, 0.0170, 0.0170, 0.0170, 0.0170, 0.0168, 0.0164, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0160, 0.0164, 0.0172, 0.0180, 0.0180, 0.0180, 0.0180, 0.0180, 0.0180, 0.0180, 0.0180, 0.0182, 0.0186, 0.0190, 0.0194, 0.0198, 0.0206, 0.0218, 0.0230, 0.0234, 0.0238, 0.0244, 0.0252, 0.0260, 0.0276, 0.0292, 0.0310, 0.0330, 0.0350, 0.0382, 0.0414, 0.0456, 0.0508, 0.0560, 0.0632, 0.0704, 0.0786, 0.0878, 0.0970, 0.1094, 0.1218, 0.1360, 0.1520, 0.1680, 0.1848, 0.2016, 0.2194, 0.2382, 0.2570, 0.2762, 0.2954, 0.3148, 0.3344, 0.3540, 0.3728, 0.3916, 0.4100, 0.4280, 0.4460, 0.4616, 0.4772, 0.4920, 0.5060, 0.5200, 0.5324, 0.5448, 0.5562, 0.5666, 0.5770, 0.5858, 0.5946, 0.6028, 0.6104, 0.6180, 0.6240, 0.6300, 0.6354, 0.6402, 0.6450],
            [0.1040, 0.1132, 0.1224, 0.1338, 0.1474, 0.1610, 0.1810, 0.2010, 0.2216, 0.2428, 0.2640, 0.2836, 0.3032, 0.3186, 0.3298, 0.3410, 0.3454, 0.3498, 0.3534, 0.3562, 0.3590, 0.3598, 0.3606, 0.3616, 0.3628, 0.3640, 0.3644, 0.3648, 0.3654, 0.3662, 0.3670, 0.3678, 0.3686, 0.3696, 0.3708, 0.3720, 0.3728, 0.3736, 0.3744, 0.3752, 0.3760, 0.3772, 0.3784, 0.3800, 0.3820, 0.3840, 0.3860, 0.3880, 0.3906, 0.3938, 0.3970, 0.4002, 0.4034, 0.4072, 0.4116, 0.4160, 0.4212, 0.4264, 0.4318, 0.4374, 0.4430, 0.4474, 0.4518, 0.4554, 0.4582, 0.4610, 0.4630, 0.4650, 0.4666, 0.4678, 0.4690, 0.4698, 0.4706, 0.4716, 0.4728, 0.4740, 0.4748, 0.4756, 0.4774, 0.4802, 0.4830, 0.4858, 0.4886, 0.4932, 0.4996, 0.5060, 0.5140, 0.5220, 0.5314, 0.5422, 0.5530, 0.5646, 0.5762, 0.5892, 0.6036, 0.6180, 0.6312, 0.6444, 0.6568, 0.6684, 0.6800, 0.6884, 0.6968, 0.7042, 0.7106, 0.7170, 0.7218, 0.7266, 0.7304, 0.7332, 0.7360, 0.7384, 0.7408, 0.7426, 0.7438, 0.7450, 0.7458, 0.7466, 0.7472, 0.7476, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7480, 0.7478, 0.7474, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7466, 0.7462, 0.7460, 0.7460, 0.7460, 0.7460, 0.7460, 0.7458, 0.7454, 0.7450, 0.7446, 0.7442, 0.7438, 0.7434, 0.7430, 0.7434, 0.7438, 0.7442, 0.7446, 0.7450, 0.7462, 0.7474, 0.7484, 0.7492, 0.7500, 0.7500, 0.7500, 0.7498, 0.7494, 0.7490, 0.7486, 0.7482, 0.7480, 0.7480, 0.7480, 0.7476, 0.7472, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470, 0.7470],
            [0.0360, 0.0360, 0.0360, 0.0362, 0.0366, 0.0370, 0.0374, 0.0378, 0.0382, 0.0386, 0.0390, 0.0390, 0.0390, 0.0392, 0.0396, 0.0400, 0.0404, 0.0408, 0.0412, 0.0416, 0.0420, 0.0420, 0.0420, 0.0422, 0.0426, 0.0430, 0.0434, 0.0438, 0.0440, 0.0440, 0.0440, 0.0444, 0.0448, 0.0450, 0.0450, 0.0450, 0.0454, 0.0458, 0.0462, 0.0466, 0.0470, 0.0474, 0.0478, 0.0484, 0.0492, 0.0500, 0.0508, 0.0516, 0.0526, 0.0538, 0.0550, 0.0558, 0.0566, 0.0580, 0.0600, 0.0620, 0.0640, 0.0660, 0.0686, 0.0718, 0.0750, 0.0782, 0.0814, 0.0848, 0.0884, 0.0920, 0.0952, 0.0984, 0.1016, 0.1048, 0.1080, 0.1132, 0.1184, 0.1234, 0.1282, 0.1330, 0.1366, 0.1402, 0.1436, 0.1468, 0.1500, 0.1516, 0.1532, 0.1542, 0.1546, 0.1550, 0.1538, 0.1526, 0.1510, 0.1490, 0.1470, 0.1442, 0.1414, 0.1386, 0.1358, 0.1330, 0.1298, 0.1266, 0.1236, 0.1208, 0.1180, 0.1156, 0.1132, 0.1108, 0.1084, 0.1060, 0.1040, 0.1020, 0.1004, 0.0992, 0.0980, 0.0968, 0.0956, 0.0946, 0.0938, 0.0930, 0.0918, 0.0906, 0.0898, 0.0894, 0.0890, 0.0882, 0.0874, 0.0868, 0.0864, 0.0860, 0.0856, 0.0852, 0.0848, 0.0844, 0.0840, 0.0840, 0.0840, 0.0840, 0.0840, 0.0840, 0.0840, 0.0840, 0.0842, 0.0846, 0.0850, 0.0858, 0.0866, 0.0880, 0.0900, 0.0920, 0.0936, 0.0952, 0.0972, 0.0996, 0.1020, 0.1052, 0.1084, 0.1126, 0.1178, 0.1230, 0.1286, 0.1342, 0.1400, 0.1460, 0.1520, 0.1588, 0.1656, 0.1728, 0.1804, 0.1880, 0.1956, 0.2032, 0.2108, 0.2184, 0.2260, 0.2328, 0.2396, 0.2464, 0.2532, 0.2600, 0.2668, 0.2736, 0.2804, 0.2872, 0.2940, 0.3004, 0.3068, 0.3130, 0.3190, 0.3250, 0.3306, 0.3362, 0.3418, 0.3474, 0.3530, 0.3582, 0.3634, 0.3686, 0.3738, 0.3790, 0.3834, 0.3878, 0.3918, 0.3954, 0.3990],
            [0.1310, 0.1476, 0.1426, 0.1378, 0.1411, 0.1470, 0.1506, 0.1523, 0.1538, 0.1559, 0.1580, 0.1599, 0.1614, 0.1625, 0.1632, 0.1640, 0.1651, 0.1664, 0.1676, 0.1687, 0.1700, 0.1717, 0.1738, 0.1762, 0.1789, 0.1820, 0.1857, 0.1898, 0.1942, 0.1988, 0.2030, 0.2068, 0.2103, 0.2138, 0.2174, 0.2210, 0.2244, 0.2275, 0.2304, 0.2332, 0.2360, 0.2388, 0.2416, 0.2443, 0.2468, 0.2490, 0.2511, 0.2530, 0.2550, 0.2570, 0.2590, 0.2610, 0.2630, 0.2649, 0.2669, 0.2690, 0.2716, 0.2745, 0.2776, 0.2808, 0.2840, 0.2870, 0.2897, 0.2922, 0.2943, 0.2960, 0.2972, 0.2979, 0.2980, 0.2974, 0.2960, 0.2936, 0.2905, 0.2875, 0.2847, 0.2820, 0.2793, 0.2770, 0.2752, 0.2743, 0.2740, 0.2743, 0.2753, 0.2769, 0.2789, 0.2810, 0.2829, 0.2849, 0.2872, 0.2896, 0.2910, 0.2908, 0.2896, 0.2885, 0.2875, 0.2860, 0.2835, 0.2809, 0.2795, 0.2804, 0.2850, 0.2942, 0.3068, 0.3215, 0.3373, 0.3540, 0.3713, 0.3891, 0.4069, 0.4243, 0.4400, 0.4533, 0.4647, 0.4752, 0.4851, 0.4940, 0.5016, 0.5081, 0.5138, 0.5191, 0.5240, 0.5286, 0.5330, 0.5369, 0.5406, 0.5440, 0.5473, 0.5505, 0.5535, 0.5563, 0.5590, 0.5614, 0.5638, 0.5662, 0.5687, 0.5710, 0.5731, 0.5750, 0.5770, 0.5790, 0.5810, 0.5831, 0.5851, 0.5869, 0.5885, 0.5900, 0.5915, 0.5931, 0.5950, 0.5970, 0.5990, 0.6008, 0.6023, 0.6036, 0.6047, 0.6060, 0.6076, 0.6093, 0.6106, 0.6114, 0.6120, 0.6127, 0.6135, 0.6145, 0.6154, 0.6160, 0.6162, 0.6161, 0.6160, 0.6160, 0.6160, 0.6161, 0.6160, 0.6159, 0.6156, 0.6150, 0.6142, 0.6133, 0.6128, 0.6124, 0.6120, 0.6112, 0.6104, 0.6097, 0.6093, 0.6090, 0.6086, 0.6081, 0.6079, 0.6077, 0.6070, 0.6058, 0.6058, 0.6092, 0.6129, 0.6090, 0.5955, 0.5957, 0.6359, 0.6764, 0.6110],
            ];
            var reference = [];
            var xyc = calcXY(test);
            var testCCT = calcCCT(xyc[0], xyc[1]);
            ///CCT is HERE---------------------------
            CCT = Math.round(testCCT);
            for (var i = 0; i < 201; i++) {
                reference[i] = bb_spectrum(i * 2 + 380, testCCT);
            }
            reference = normalize(reference);
            var Xref = [];
            var Yref = [];
            var Zref = [];
            var Xtest = [];
            var Ytest = [];
            var Ztest = [];

            var refXYZ = calcXYZ(reference);
            var testXYZ = calcXYZ(test);

            var refNorm = 100 / refXYZ[1];
            refXYZ[0] = refXYZ[0] * refNorm;
            refXYZ[1] = refXYZ[1] * refNorm;
            refXYZ[2] = refXYZ[2] * refNorm;

            var testNorm = 100 / testXYZ[1];
            testXYZ[0] = testXYZ[0] * refNorm;
            testXYZ[1] = testXYZ[1] * refNorm;
            testXYZ[2] = testXYZ[2] * refNorm;

            var refTCSXYZ = [];
            var testTCSXYZ = [];
            for (var t = 0; t < 15; t++) {
                var refRefl = [];
                var testRefl = [];
                for (var k = 0; k < 201; k++) {
                    refRefl[k] = reference[k] * TCS[t][k];
                    testRefl[k] = test[k] * TCS[t][k];
                }
                refTCSXYZ[t] = calcXYZ(refRefl);
                testTCSXYZ[t] = calcXYZ(testRefl);
            }
            //normalize the XYZ values based on original
            for (var q = 0; q < 15; q++) {
                refTCSXYZ[q][0] = refTCSXYZ[q][0] * refNorm;
                refTCSXYZ[q][1] = refTCSXYZ[q][1] * refNorm;
                refTCSXYZ[q][2] = refTCSXYZ[q][2] * refNorm;

                testTCSXYZ[q][0] = testTCSXYZ[q][0] * testNorm;
                testTCSXYZ[q][1] = testTCSXYZ[q][1] * testNorm;
                testTCSXYZ[q][2] = testTCSXYZ[q][2] * testNorm;

            }

            var XYref = calcXYZ(normalize(reference));
            var XYtest = calcXYZ(test);

            //u and v coordinates for reference and test in 1960
            var uref = 4 * XYref[0] / (XYref[0] + 15 * XYref[1] + 3 * XYref[2]);
            var vref = 6 * XYref[1] / (XYref[0] + 15 * XYref[1] + 3 * XYref[2]);
            var utest = 4 * XYtest[0] / (XYtest[0] + 15 * XYtest[1] + 3 * XYtest[2]);
            var vtest = 6 * XYtest[1] / (XYtest[0] + 15 * XYtest[1] + 3 * XYtest[2]);

            var DC = Math.sqrt(Math.pow(uref - utest, 2) + Math.pow(vref - vtest, 2));
            //c and d constants for use in Von Kries
            var cref = (4 - uref - 10 * vref) / vref;
            var dref = (1.708 * vref - 1.481 * uref + 0.404) / vref;
            var ctest = (4 - utest - 10 * vtest) / vtest;
            var dtest = (1.708 * vtest - 1.481 * utest + 0.404) / vtest;

            //u and v coordinates for each TCS in 1960
            var urefTCS = [];
            var vrefTCS = [];
            var utestTCS = [];
            var vtestTCS = [];

            //c and d constants for TCS samples for use in Von Kries
            var crefTCS = [];
            var drefTCS = [];
            var ctestTCS = [];
            var dtestTCS = [];

            var vku = [];
            var vkv = [];

            var Wref = [];
            var Uref = [];
            var Vref = [];

            var Wtest = [];
            var Utest = [];
            var Vtest = [];

            var Euc = [];
            var Ri = [];
            for (var s = 0; s < 15; s++) {

                urefTCS[s] = 4 * refTCSXYZ[s][0] / (refTCSXYZ[s][0] + 15 * refTCSXYZ[s][1] + 3 * refTCSXYZ[s][2]);
                vrefTCS[s] = 6 * refTCSXYZ[s][1] / (refTCSXYZ[s][0] + 15 * refTCSXYZ[s][1] + 3 * refTCSXYZ[s][2]);
                utestTCS[s] = 4 * testTCSXYZ[s][0] / (testTCSXYZ[s][0] + 15 * testTCSXYZ[s][1] + 3 * testTCSXYZ[s][2]);
                vtestTCS[s] = 6 * testTCSXYZ[s][1] / (testTCSXYZ[s][0] + 15 * testTCSXYZ[s][1] + 3 * testTCSXYZ[s][2]);

                crefTCS[s] = (4 - urefTCS[s] - 10 * vrefTCS[s]) / vrefTCS[s];
                drefTCS[s] = (1.708 * vrefTCS[s] - 1.481 * urefTCS[s] + 0.404) / vrefTCS[s];
                ctestTCS[s] = (4 - utestTCS[s] - 10 * vtestTCS[s]) / vtestTCS[s];
                dtestTCS[s] = (1.708 * vtestTCS[s] - 1.481 * utestTCS[s] + 0.404) / vtestTCS[s];

                vku[s] = (10.872 + 0.404 * (cref / ctest) * ctestTCS[s] - 4 * (dref / dtest) * dtestTCS[s]) / (16.518 + 1.481 * (cref / ctest) * ctestTCS[s] - (dref / dtest) * dtestTCS[s]);
                vkv[s] = 5.52 / (16.518 + 1.481 * (cref / ctest) * ctestTCS[s] - (dref / dtest) * dtestTCS[s]);

                Wref[s] = 25 * Math.pow(refTCSXYZ[s][1], 1 / 3) - 17;
                Uref[s] = 13 * Wref[s] * (urefTCS[s] - uref);
                Vref[s] = 13 * Wref[s] * (vrefTCS[s] - vref);

                Wtest[s] = 25 * Math.pow(testTCSXYZ[s][1], 1 / 3) - 17;
                Utest[s] = 13 * Wtest[s] * (vku[s] - uref);
                Vtest[s] = 13 * Wtest[s] * (vkv[s] - vref);

                Euc[s] = Math.sqrt(Math.pow(Wref[s] - Wtest[s], 2) + Math.pow(Uref[s] - Utest[s], 2) + Math.pow(Vref[s] - Vtest[s], 2));
                Ri[s] = 100 - 4.6 * Euc[s];
                if (DC > 0.0054) {
                    Ri[s] = 0;
                }
            }
            //console.log(Ri);
            return Ri;

        }
        function calcXY(spec) {
            var XYZ = calcXYZ(spec);
            return [XYZ[0] / (XYZ[0] + XYZ[1] + XYZ[2]), XYZ[1] / (XYZ[0] + XYZ[1] + XYZ[2])];
        }

        function calcXYZ(spec) {
            var x = [0.00136800000, 0.00164232800, 0.00199575700, 0.00253538500, 0.00330082900, 0.00424300000, 0.00533004800, 0.00674111700, 0.00875137300, 0.01142170000, 0.01431000000, 0.01714744000, 0.02074801000, 0.02620736000, 0.03388092000, 0.04351000000, 0.05502260000, 0.06921200000, 0.08695811000, 0.10840630000, 0.13438000000, 0.16539570000, 0.19861100000, 0.23018680000, 0.25877730000, 0.28390000000, 0.30489650000, 0.32164540000, 0.33435130000, 0.34312130000, 0.34828000000, 0.35014740000, 0.34928700000, 0.34637330000, 0.34180880000, 0.33620000000, 0.33004110000, 0.32288680000, 0.31402510000, 0.30329040000, 0.29080000000, 0.27672140000, 0.26042270000, 0.24084750000, 0.21840720000, 0.19536000000, 0.17332730000, 0.15228330000, 0.13217860000, 0.11327520000, 0.09564000000, 0.07930804000, 0.06458099000, 0.05186211000, 0.04115088000, 0.03201000000, 0.02414440000, 0.01754040000, 0.01216179000, 0.00796724000, 0.00490000000, 0.00294532000, 0.00223629300, 0.00292552000, 0.00517484000, 0.00930000000, 0.01553588000, 0.02399277000, 0.03481485000, 0.04798504000, 0.06327000000, 0.08046224000, 0.09945645000, 0.12016740000, 0.14236790000, 0.16550000000, 0.18914000000, 0.21336580000, 0.23832090000, 0.26399220000, 0.29040000000, 0.31757260000, 0.34548280000, 0.37408390000, 0.40337840000, 0.43344990000, 0.46433600000, 0.49597130000, 0.52829590000, 0.56120940000, 0.59450000000, 0.62797580000, 0.66156970000, 0.69523920000, 0.72882840000, 0.76210000000, 0.79482560000, 0.82682480000, 0.85793250000, 0.88789440000, 0.91630000000, 0.94279840000, 0.96721790000, 0.98938560000, 1.00908920000, 1.02630000000, 1.04098600000, 1.05246670000, 1.05979440000, 1.06280680000, 1.06220000000, 1.05844360000, 1.05097680000, 1.03903690000, 1.02266620000, 1.00260000000, 0.97933140000, 0.95284790000, 0.92319400000, 0.89050200000, 0.85444990000, 0.81494600000, 0.77295400000, 0.72958360000, 0.68560220000, 0.64240000000, 0.60111380000, 0.56139770000, 0.52259950000, 0.48474360000, 0.44790000000, 0.41209800000, 0.37753330000, 0.34445630000, 0.31301920000, 0.28350000000, 0.25611840000, 0.23072720000, 0.20709710000, 0.18517080000, 0.16490000000, 0.14623000000, 0.12914670000, 0.11363970000, 0.09969044000, 0.08740000000, 0.07680428000, 0.06768664000, 0.05980685000, 0.05297104000, 0.04677000000, 0.04087536000, 0.03540461000, 0.03056419000, 0.02634484000, 0.02270000000, 0.01959988000, 0.01698717000, 0.01479064000, 0.01294868000, 0.01135916000, 0.00993884600, 0.00867885400, 0.00758238800, 0.00662731300, 0.00579034600, 0.00505258300, 0.00440350700, 0.00383391300, 0.00333434200, 0.00289932700, 0.00252302000, 0.00219661600, 0.00191096000, 0.00166011000, 0.00143997100, 0.00124627500, 0.00107643000, 0.00092873580, 0.00080075030, 0.00069007860, 0.00059450210, 0.00051242900, 0.00044245360, 0.00038298140, 0.00033230110, 0.00028888710, 0.00025156820, 0.00021917100, 0.00019084050, 0.00016615050, 0.00014462190, 0.00012585200, 0.00010955150, 0.00009539445, 0.00008307527, 0.00007231304, 0.00006292844, 0.00005477028, 0.00004767654, 0.00004150994];
            var y = [0.00003900000, 0.00004691460, 0.00005717640, 0.00007234421, 0.00009350816, 0.00012000000, 0.00015149200, 0.00019181600, 0.00024690670, 0.00031852000, 0.00039600000, 0.00047302400, 0.00057221870, 0.00072456000, 0.00094116000, 0.00121000000, 0.00153075200, 0.00193532300, 0.00245480000, 0.00311780000, 0.00400000000, 0.00515932000, 0.00654616000, 0.00808650700, 0.00976768000, 0.01160000000, 0.01358272000, 0.01571509000, 0.01800736000, 0.02045392000, 0.02300000000, 0.02561024000, 0.02835125000, 0.03131083000, 0.03452112000, 0.03800000000, 0.04176800000, 0.04584267000, 0.05024368000, 0.05498056000, 0.06000000000, 0.06527752000, 0.07091109000, 0.07701600000, 0.08366680000, 0.09098000000, 0.09904584000, 0.10788460000, 0.11753200000, 0.12799280000, 0.13902000000, 0.15046930000, 0.16271770000, 0.17624310000, 0.19127350000, 0.20802000000, 0.22673450000, 0.24748120000, 0.27018490000, 0.29505050000, 0.32300000000, 0.35468580000, 0.38928750000, 0.42562990000, 0.46339440000, 0.50300000000, 0.54451200000, 0.58696530000, 0.62934560000, 0.67087520000, 0.71000000000, 0.74546360000, 0.77783680000, 0.80811040000, 0.83630680000, 0.86200000000, 0.88496240000, 0.90544320000, 0.92373480000, 0.93992260000, 0.95400000000, 0.96600740000, 0.97602250000, 0.98409240000, 0.99031280000, 0.99495010000, 0.99809830000, 0.99974820000, 0.99985670000, 0.99832550000, 0.99500000000, 0.98974260000, 0.98272410000, 0.97408370000, 0.96385680000, 0.95200000000, 0.93849920000, 0.92345760000, 0.90700640000, 0.88920480000, 0.87000000000, 0.84939200000, 0.82758130000, 0.80479470000, 0.78119200000, 0.75700000000, 0.73242240000, 0.70749650000, 0.68221920000, 0.65667440000, 0.63100000000, 0.60531440000, 0.57963790000, 0.55396110000, 0.52835280000, 0.50300000000, 0.47803040000, 0.45340320000, 0.42908000000, 0.40503200000, 0.38100000000, 0.35682720000, 0.33281760000, 0.30933810000, 0.28659360000, 0.26500000000, 0.24488960000, 0.22605280000, 0.20816160000, 0.19115520000, 0.17500000000, 0.15964640000, 0.14512590000, 0.13150030000, 0.11877920000, 0.10700000000, 0.09618864000, 0.08626485000, 0.07712064000, 0.06871008000, 0.06100000000, 0.05395504000, 0.04754965000, 0.04175872000, 0.03656384000, 0.03200000000, 0.02807664000, 0.02470805000, 0.02180077000, 0.01928108000, 0.01700000000, 0.01483718000, 0.01283478000, 0.01106831000, 0.00953331100, 0.00821000000, 0.00708542400, 0.00613848500, 0.00534305900, 0.00467640400, 0.00410200000, 0.00358909900, 0.00313409300, 0.00273813900, 0.00239324400, 0.00209100000, 0.00182458000, 0.00159018700, 0.00138449600, 0.00120409200, 0.00104700000, 0.00091110880, 0.00079323840, 0.00069008270, 0.00059949600, 0.00052000000, 0.00045005280, 0.00038871840, 0.00033538350, 0.00028916560, 0.00024920000, 0.00021468560, 0.00018504750, 0.00015977810, 0.00013830160, 0.00012000000, 0.00010432240, 0.00009084587, 0.00007914667, 0.00006891600, 0.00006000000, 0.00005222560, 0.00004544747, 0.00003956104, 0.00003444868, 0.00003000000, 0.00002611356, 0.00002272461, 0.00001977855, 0.00001721687, 0.00001499000];
            var z = [0.00645000100, 0.00774548800, 0.00941454400, 0.01196580000, 0.01558805000, 0.02005001000, 0.02520288000, 0.03189704000, 0.04143771000, 0.05411988000, 0.06785001000, 0.08136156000, 0.09854048000, 0.12461330000, 0.16130350000, 0.20740000000, 0.26261140000, 0.33079850000, 0.41620910000, 0.51969480000, 0.64560000000, 0.79671330000, 0.95943900000, 1.11536730000, 1.25812330000, 1.38560000000, 1.49480350000, 1.58488070000, 1.65640480000, 1.70987450000, 1.74706000000, 1.76962330000, 1.78043340000, 1.78296820000, 1.77919820000, 1.77211000000, 1.76403900000, 1.75246630000, 1.73355950000, 1.70593690000, 1.66920000000, 1.62341270000, 1.56452800000, 1.48611140000, 1.38987990000, 1.28764000000, 1.18782430000, 1.09014800000, 0.99419760000, 0.90145310000, 0.81295010000, 0.72944480000, 0.65210490000, 0.58232860000, 0.52033760000, 0.46518000000, 0.41618360000, 0.37294590000, 0.33485780000, 0.30133750000, 0.27200000000, 0.24648380000, 0.22345330000, 0.20116920000, 0.17922540000, 0.15820000000, 0.13837580000, 0.12007510000, 0.10390480000, 0.08998272000, 0.07824999000, 0.06867816000, 0.06078835000, 0.05390435000, 0.04775276000, 0.04216000000, 0.03693564000, 0.03208872000, 0.02771181000, 0.02378716000, 0.02030000000, 0.01724036000, 0.01458461000, 0.01230723000, 0.01037792000, 0.00874999900, 0.00738160000, 0.00624280000, 0.00530360000, 0.00453420000, 0.00390000000, 0.00337060000, 0.00293480000, 0.00258520000, 0.00230940000, 0.00210000000, 0.00194820000, 0.00184093300, 0.00176626700, 0.00171120000, 0.00165000100, 0.00156440000, 0.00145853300, 0.00133666700, 0.00120500000, 0.00110000000, 0.00104940000, 0.00102120000, 0.00096864000, 0.00088688000, 0.00080000000, 0.00072368000, 0.00064544000, 0.00054786670, 0.00043540000, 0.00034000000, 0.00028316000, 0.00025181330, 0.00022954670, 0.00021196000, 0.00019000000, 0.00015564000, 0.00011685330, 0.00008613333, 0.00006500000, 0.00004999999, 0.00003948000, 0.00003264000, 0.00002765333, 0.00002364000, 0.00002000000, 0.00001620000, 0.00001213333, 0.00000773333, 0.00000320000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000, 0.00000000000];
            var XX = 0.0;
            var YY = 0.0;
            var ZZ = 0.0;
            for (var i = 1; i < 200; i++) {
                XX = XX + spec[i] * x[i];
                YY = YY + spec[i] * y[i];
                ZZ = ZZ + spec[i] * z[i];
            }
            return ([XX, YY, ZZ]);
        }
        function calcCCT(x, y) {
            //McCamy's approximation
            var n = (x - 0.3320) / (0.1858 - y);
            return (437 * Math.pow(n, 3) + 3601 * Math.pow(n, 2) + 6861 * n + 5517);
        }
        function bb_spectrum(wavelength, CCT) {

            var wlm = wavelength * 1e-9;   /* Wavelength in meters */

            return (3.74183e-16 * Math.pow(wlm, -5.0)) / (Math.exp(1.4388e-2 / (wlm * CCT)) - 1.0);
        }

    }


    jsPdfGenerator = () => {
        console.log("printing")
        const input = document.getElementsByClassName('target')[0];
        html2canvas(input)
            .then((canvas) => {
                const imgData = canvas.toDataURL('image/png');
                const pdf = new jsPDF('l', 'pt', 'a4');
                pdf.addImage(imgData, 'JPEG', 20, 20, 770, 450);
                pdf.save('instrumentpage.pdf');
            })
        //document.getElementsByClassName("inst-dropdown")[0].innerHTML = save;
        return;
    }
    //<Graph className="theGraph"></Graph>


    render() {

        var lastData;
        return (
            <Segment className='target'>
                <Dropdown className="inst-dropdown" closeOnChange={true} text='Export as'>
                    <Dropdown.Menu>
                        <Dropdown.Item onClick={this.jsPdfGenerator} text='pdf' />
                        <Dropdown.Item onClick={_ = () => { console.log('eis') }} text='eis' />
                        <Dropdown.Item onClick={_ = () => { console.log('txt') }} text='txt' />
                        <Dropdown.Item onClick={_ = () => { console.log('xls') }} text='xls' />
                    </Dropdown.Menu>
                </Dropdown>

                <Header as='h1'>{this.props.s1}</Header>
                <Header size='medium'>Catalog Number: {this.props.s0}</Header>

                <br />

                <Grid>
                    <Grid.Row>
                        <Grid.Column id="firstCol" width={9}>
                            <div className="inst-info">
                                <Header className="headerForTable" size='medium'>Basic Information</Header>
                                <Table fixed='true' size='small' celled>
                                    <Table.Body>
                                        <Table.Row>
                                            <Table.Cell width='2'>Manufacturer:</Table.Cell>
                                            <Table.Cell width='2'>{this.props.s2}</Table.Cell>
                                        </Table.Row>
                                        <Table.Row>
                                            <Table.Cell width='2'>Description:</Table.Cell>
                                            <Table.Cell width='2'>{this.props.s3}</Table.Cell>
                                        </Table.Row>
                                    </Table.Body>
                                </Table>


                                <Header className="headerForTable" size='medium'>Creation Information</Header>
                                <Table fixed='true' size='small' celled>
                                    <Table.Body>
                                        <Table.Row>
                                            <Table.Cell width='2'>Document Creator:</Table.Cell>
                                            <Table.Cell width='2'>{this.props.s4}</Table.Cell>
                                        </Table.Row>
                                        <Table.Row>
                                            <Table.Cell width='2'>Laboratory:</Table.Cell>
                                            <Table.Cell width='2'>{this.props.s5}</Table.Cell>
                                        </Table.Row>
                                        <Table.Row>
                                            <Table.Cell width='2'>Creation Date:</Table.Cell>
                                            <Table.Cell width='2'>{this.props.s6}</Table.Cell>
                                        </Table.Row>
                                        <Table.Row>
                                            <Table.Cell width='2'>Report Number: </Table.Cell>
                                            <Table.Cell width='2'>{this.props.s7} </Table.Cell>
                                        </Table.Row>
                                    </Table.Body>
                                </Table>


                                <Header className="headerForTable" size='medium'>Calculations</Header>

                                <Button className="headerForTable" onClick={_ = () => { this.setState({ doingCalculations: true }); this.calculations(this.state.save) }}>Reveal Calculations</Button>
                                <Button className="headerForTable" onClick={_ = () => { this.setState({ doingCalculations: false }); document.getElementsByClassName("erroring")[0].innerHTML = '' }}>Hide Calculations</Button>
                                <br />
                                <br />
                                <span className="erroring"></span>

                                {this.state.doingCalculations ?



                                    <div><br />

                                        <Table fixed='true' size='small' celled>
                                            <Table.Body>
                                                <Table.Row>
                                                    <Table.Cell width='2'>Color Correlated Temperature:</Table.Cell>
                                                    <Table.Cell width='2'>{CCT}</Table.Cell>
                                                </Table.Row>
                                                <Table.Row>
                                                    <Table.Cell width='2'>CRI General (R1-R8):</Table.Cell>
                                                    <Table.Cell width='2'>{raresult}</Table.Cell>
                                                </Table.Row>
                                                <Table.Row>
                                                    <Table.Cell width='2'>CRI Extended (R1-R15):</Table.Cell>
                                                    <Table.Cell width='2'>{rereresult}</Table.Cell>
                                                </Table.Row>
                                            </Table.Body>
                                        </Table>
                                    </div> : console.log("no calculations")}

                            </div>







                        </Grid.Column>
                        <Grid.Column id="rightCol" width={7}>
                            <Graph real={this.state.save} ssidForGraph = {this.props.s00}></Graph>
                        </Grid.Column>
                    </Grid.Row>
                </Grid>






            </Segment>

        ) // end return 
    } // end render
} //end InstProf class